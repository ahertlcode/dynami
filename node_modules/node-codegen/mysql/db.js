const mysql = require('mysql');
const {backEndPath, frontEndPath, dbHost, dbUser, dbPass, dbStore} = require('../config.js');


const connection = (conf) => {
    const param = {};
    if (!conf.host) return "Host not supplied";
    if (!conf.user) return "User not supplied";
    if (!conf.password) return "Password not supplied";
    if (conf.host) param.host = conf.host;
    if (conf.user) param.user = conf.user;
    if (conf.password) param.password = conf.password;
    if (conf.database) param.database = conf.database;
    return  mysql.createConnection(param);
};


const conn = connection({
    host:dbHost, user:dbUser, password:dbPass, database:dbStore
});


const queryHandler = (query) => {
    return new Promise((resolve, reject) => {
        return conn.query(query, (error, result) => {
            result === undefined ? reject(error) : resolve(result);                                            
        });
    });
};


const showTables = () => {
    return queryHandler("SHOW TABLES").then((result) => {
        return result;
    }).catch((error) => {
        throw error;
    });
};

const getPFkeys = ($curr_tab="", $curr_col="", $reftab="", $refcol="") => {    
    let $curr_tabQry = ($curr_tab != "") ? ` AND (table_name='${$curr_tab}') ` : "";
    let $curr_colQry = ($curr_col != "") ? ` AND column_name IN ('${$curr_col}') ` : "";
    let $reftabQry   = ($reftab != "")   ? ` AND (referenced_table_name='${$reftab}') `  : "";
    let $refcolQry   = ($refcol != "")   ? ` AND (referenced_column_name='${$refcol}') ` : "";

    const $qry = `SELECT table_name, column_name, referenced_table_name, referenced_column_name
                FROM information_schema.key_column_usage
                WHERE (referenced_table_name IS NOT NULL) AND
                (CONSTRAINT_SCHEMA='${dbStore}')
                ${$curr_tabQry} ${$curr_colQry} ${$reftabQry} ${$refcolQry}`;

    return queryHandler($qry).then((result) => {
        return  result;
    }).catch((error) => {
        throw error;
    });
};


const notEmpty = (inObj, dsConstructor) => {
    return (Object.keys(inObj).length > 0) && (inObj.constructor === dsConstructor);
}


module.exports.connection = conn;
module.exports.queryHandler = queryHandler;
module.exports.showTables = showTables;
module.exports.getPFkeys = getPFkeys;
module.exports.notEmpty = notEmpty;


/* public function tablesThatReferencedMe($curTable) {
    $currSql = "select table_name
                from information_schema.KEY_COLUMN_USAGE
                where table_schema = '{$this->db}'
                and referenced_table_name = '{$curTable}';";

    $stmt        = $this->conn->prepare($currSql);
    return ($stmt->execute()) ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
} */
#!/usr/bin/env node

const pluralize = require('pluralize');
const fs = require('fs');
const path = require('path');

const { backEndPath, frontEndPath, dbHost, dbUser, dbPass, dbStore, nodecodegenConfig } = require('../config.js');
const { showTables } = require('../mysql/db');
const controllers = require('../maker/controllers');
const routes = require('../maker/routes');
const middlewares = require('../maker/middlewares');
const reactComponents = require('../maker/react-components');
const htmlPages = require('../maker/html-pages');
const testdd = require('../maker/test');
const mmodel = require('../maker/models');

const params = process.argv.map(item => item.toLowerCase());
const dest = (params.includes("direct")) ? "" : "_test";
let $action = params[2].toUpperCase();
let mypath = path.join(__dirname, '../');


const doFileCopy = (src, dest) => {
    const filePath = path.parse(dest).dir;
    if (!fs.existsSync(filePath)) fs.mkdirSync(filePath);
    if (fs.existsSync(src)) {
        fs.copyFile(src, dest, (err) => {
            if (err) throw err;
        });
    }
};


const notEmptyArray = (array) => {
    return (Array.isArray(array) && (array.length > 0));
}


const showCommands = () => {
    console.log("Command Format 'npx nodecodegen <action_commands> direct(optional)'");
    console.log("NOTE: With direct keyword, nodecodegen will write directly dev files, else, it will write into _test folders");
    console.log("npx nodecodegen commands ===> To see available commands");
    console.log("npx nodecodegen everything-react ===> To generate controllers, react-components, routes");
    console.log("npx nodecodegen everything-html ===> To generate controllers, html-components, routes");
    console.log("npx nodecodegen controllers ===> To generate controllers");
    console.log("npx nodecodegen react-components ===> To generate react-components");
    console.log("npx nodecodegen routes ===> To generate routes");
    console.log("npx nodecodegen html-pages ===> To generate html related pages");
    console.log("npx nodecodegen middlewares ===> To generate middlewares");
    console.log("npx nodecodegen test ===> To generate Test");
    console.log("npx nodecodegen model ===> To generate Models");
};


const generateMiddlewares = (tableName) => {
    middlewares.makeMiddleWare(tableName).then((res) => {
        const { authFile, fileFile, utilityFile } = res;
        if (authFile) writeToFile(`${backEndPath}/middlewares/${tableName.toLowerCase()}Auth.js`, authFile);
        if (fileFile) writeToFile(`${backEndPath}/middlewares/${tableName.toLowerCase()}.js`, fileFile);
    });
}


const generateHtmlPages = (tableName) => {
    htmlPages.makeHtmlFiles(tableName).then((res) => {
        const { htmlFile, recordFile, jsFile, singlePage, singlePageRecord } = res;

        let file2write = nodecodegenConfig.html.isSinglePage === true ? singlePage : htmlFile;
        let record2write = nodecodegenConfig.html.isSinglePage === true ? singlePageRecord : recordFile;        

        writeToFile(`${frontEndPath}/www/html/${tableName.toLowerCase()}.html`, file2write);
        writeToFile(`${frontEndPath}/www/report/${tableName.toLowerCase()}.html`, record2write);
        writeToFile(`${frontEndPath}/www/js/${tableName.toLowerCase()}.js`, jsFile);

        if (tableName.toLowerCase() === "users") {
            doFileCopy(mypath+'utilities/user-login.html', `${frontEndPath}/www/html/login.html`);
            doFileCopy(mypath+'utilities/user-register.html', `${frontEndPath}/www/html/register.html`);
            doFileCopy(mypath+'utilities/user-reset.html', `${frontEndPath}/www/html/passwordreset.html`);
        }
    });
}


const generateReactComponents = (tableName) => {
    reactComponents.makeReactComponents(tableName).then((res) => {
        const { makeString } = res;
        writeToFile(`${frontEndPath}/src/components/${makeComponentName(tableName)}.js`, makeString);
    });
}


const generateRoutes = (tableName) => {
    routes.makeRoute(tableName).then((res) => {
        writeToFile(`${backEndPath}/routes/${tableName.toLowerCase()}.js`, res);
    });
}

const generateTest = (tableName) => {
    testdd.makeTest(tableName).then((res) => {
        writeToFile(`${backEndPath}/test/${tableName.toLowerCase()}.js`, res);
    });
}

const generateModel = (tableName) => {
    mmodel.makeModel(tableName).then((res) => {
        writeToFile(`${backEndPath}/models/` + pluralize.singular(tableName.toLowerCase()) + `.js`, res);
    });
}

const generateControllers = (tableName) => {
    controllers.makeController(tableName).then((res) => {
        writeToFile(`${backEndPath}/controllers/${tableName.toLowerCase()}.js`, res);
    });
}

const writeToFile = (fileName, fileContent) => {
    if (!fileName) {
        console.log("No file to write to");
        return '';
    }

    const filePath = path.parse(fileName).dir;
    if (!fs.existsSync(filePath)) fs.mkdirSync(filePath, {recursive: true});
    
    fs.writeFile(fileName, fileContent, (error) => {
        if (error) return console.log(error);
        console.log('The file was saved!');
    });
};


const makeComponentName = (tableName) => {
    return tableName.charAt(0).toUpperCase() + tableName.substring(1);
}


if (['COMMANDS','EVERYTHING-REACT','EVERYTHING-HTML','CONTROLLERS','ROUTES','REACT-COMPONENTS','HTML-PAGES', 'MIDDLEWARES', 'TEST', 'MODEL'].includes($action)) {
    if ($action === "COMMANDS") {
        showCommands();
    } else {
        showTables().then((result) => {
            if (notEmptyArray(result)) {
                result = result.map(item => item[`Tables_in_${dbStore}`]);

                let finalResult  = [];
                let tablesConfig = nodecodegenConfig.tables;
                if ((tablesConfig.constructor === String) && (tablesConfig.toUpperCase() !== "ALL")) {
                    console.log("Invalid database table names in the Config file");
                    console.log("You can enter 'All' for all database tables or array of the table names");
                    return;
                } else if ((tablesConfig.constructor === Array) && (!tablesConfig.length)) {
                    console.log("Please specify the database tables in the Config file");
                    console.log("You can enter 'All' for all database tables or array of the table names");
                    return;
                } else if ((tablesConfig.constructor === String) && (tablesConfig.toUpperCase() === "ALL")) {
                    finalResult = result;
                } else if ((tablesConfig.constructor === Array) && (tablesConfig.length)) {
                    finalResult = tablesConfig;
                }
                
                let exclude_table = nodecodegenConfig.excludeTables.map(item => item.toLowerCase());
                finalResult.forEach((item, pos) => {
                    let tableName = item;
                    if (!result.includes(item)) {
                        console.log(`table '${item}' does not exist in your database`);
                    } else {
                        if (exclude_table.includes(tableName.toLowerCase())) {
                            console.log(`TABLE :: ${tableName} skipped`);
                        } else {
                            if ($action === "CONTROLLERS") generateControllers(tableName);
                        
                            if ($action === "ROUTES") generateRoutes(tableName);
                            
                            if ($action === "REACT-COMPONENTS") generateReactComponents(tableName);
                            
                            if ($action === "HTML-PAGES") generateHtmlPages(tableName);
                            
                            if ($action === "MIDDLEWARES") generateMiddlewares(tableName);
                            
                            if ($action === "EVERYTHING-REACT") {
                                generateControllers(tableName);
                                generateRoutes(tableName);
                                generateReactComponents(tableName);
                                generateMiddlewares(tableName);
                            }
        
                            if ($action === "EVERYTHING-HTML") {
                                generateControllers(tableName);
                                generateRoutes(tableName);
                                generateHtmlPages(tableName);
                                generateMiddlewares(tableName);
                            }
                            if($action === "TEST") generateTest(tableName);
                            if ($action === "MODEL") generateModel(tableName);
                        }
                    }
                });
                //makeModels,  makeSeeders,  makeTests,  makeMigrations
            }
        });
    } 
    
    if ($action === "CONTROLLERS") doFileCopy(mypath+'utilities/backend-utils.js', `${backEndPath}/utilities/utils.js`);
    
    if ($action === "ROUTES") doFileCopy(mypath+'utilities/route-index.js', `${backEndPath}/routes/index.js`);

    if ($action === "REACT-COMPONENTS") doFileCopy(mypath+'utilities/react-action.js', `${frontEndPath}/src/Actions/Actions.js`);
    
    if ($action === "HTML-PAGES") {
        doFileCopy(mypath+'utilities/js-include.js', `${frontEndPath}/www/js/include.js`);
        doFileCopy(mypath+'utilities/html-action.js', `${frontEndPath}/www/js/Actions.js`);
        doFileCopy(mypath+'utilities/wysEditor.js', `${frontEndPath}/www/js/wysEditor.js`);
        doFileCopy(mypath+'utilities/base-class.js', `${frontEndPath}/www/js/BaseObject.js`);        
    }
    
    if ($action === "EVERYTHING-REACT") {
        doFileCopy(mypath+'utilities/backend-utils.js', `${backEndPath}/utilities/utils.js`);
        doFileCopy(mypath+'utilities/route-index.js', `${backEndPath}/routes/index.js`);
        doFileCopy(mypath+'utilities/react-action.js', `${frontEndPath}/src/Actions/Actions.js`);
        //doFileCopy(mypath+'utilities/js-include.js', `${frontEndPath}/www/js/include.js`);
        //doFileCopy(mypath+'utilities/html-action.js', `${frontEndPath}/www/js/Actions.js`);
        //doFileCopy(mypath+'utilities/wysEditor.js', `${frontEndPath}/www/js/wysEditor.js`);
    }

    if ($action === "EVERYTHING-HTML") {
        doFileCopy(mypath+'utilities/backend-utils.js', `${backEndPath}/utilities/utils.js`);
        doFileCopy(mypath+'utilities/route-index.js', `${backEndPath}/routes/index.js`);
        doFileCopy(mypath+'utilities/js-include.js', `${frontEndPath}/www/js/include.js`);
        doFileCopy(mypath+'utilities/html-action.js', `${frontEndPath}/www/js/Actions.js`);
        doFileCopy(mypath+'utilities/wysEditor.js', `${frontEndPath}/www/js/wysEditor.js`);
        doFileCopy(mypath+'utilities/base-class.js', `${frontEndPath}/www/js/BaseObject.js`);
    }

    if ($action === "MODEL") {
        doFileCopy(mypath + 'utilities/model-index.js', `${backEndPath}/models/index.js`);
    }
} else {
    console.log(`Invalid command : ${params[2]}`);
}
class BaseObject {
    constructor() {
        this.formData = {};
        this.offset = 0;
        this.totalRecordCount = 0;
        this.renderedRecordCount = 0;
        this.lastSortBy = "";
        this.lastSortOrder = "";
        this.tableBodyNode = document.querySelector("#recDisplay tbody");
        this.tableHeadNode = document.querySelector("#recDisplay thead");

        //UPLOAD HEADER NODES
        this.uploadBodyNode = document.querySelector("#uploadsMenuContainer tbody");
        this.uploadHeaderNode = document.querySelector("#uploadsMenuContainer thead");

        this.selectedRecords = [];
        this.selectedUploadRecords = [];
        this.finalSelectedRecordsForUpload = [];
        this.uploadedData = {};
    }

    sortArray = (innArr, sortby='') => innArr.sort((one, two) => one[sortby] < two[sortby] ? -1 : 1);

    rSortArray = (innArr, sortby='') => innArr.sort((one, two) => one[sortby] < two[sortby] ? 1 : -1);

    renderToForm = (recId) => {
        this.show(recId).then((response) => {
            for (let prop in response[0]) {
                const dsDom = document.querySelector(`#${prop}`);                
                if (dsDom) dsDom.value = response[0][prop];
            } 
        });
    }

    sortRecord = () => {
        this.tableHeadNode.addEventListener('click', (e) => {
            this.sortBy = Object.keys(this.tableHead).find(k => this.tableHead[k] === e.target.textContent);
            this.displaySortedRecord();
        });
    }

    renderTableHeader = () => {
        if (this.tableHeadNode) {
            this.tableHeadNode.insertAdjacentHTML("beforeend", this.tabObj.tableHeader(this.tableHead, "", "idata"));
            this.sortRecord();
        }
    }

    displaySortedRecord = () => {
        this.tableBodyNode.innerHTML = "";
        let sorted = {};
        if ((this.lastSortBy === this.sortBy) && (this.lastSortOrder === "ASC")) {
            sorted = this.rSortArray(this.displayRecord, this.sortBy);
            this.lastSortOrder = "DESC";
        } else {
            sorted = this.sortArray(this.displayRecord, this.sortBy);
            this.lastSortOrder = "ASC";
        }

        sorted.forEach((item, pos) => {
            if (this.tableBodyNode) {
                this.tableBodyNode.insertAdjacentHTML("beforeend", this.tabObj.makeRow(this.resolveTableData(item,pos), "", "idata")); 
            }
        });
        this.lastSortBy = this.sortBy;
    }

    displayTableRecord = (data) => {
        data.forEach((item, pos) => {
            this.displayRecord.push(item);
            if (this.tableBodyNode) {
                this.tableBodyNode.insertAdjacentHTML("beforeend", this.tabObj.makeRow(this.resolveTableData(item, pos), "", "idata"));
            } 
        });
    }

    getSelectInput = (path, fieldId, fieldName, fieldClasses, selectDesc) => {
        getData(path).then((response) => {
            if ((response) && notEmptyArray(response.rows)) {
                const selectString = makeSelect(fieldId, fieldName, fieldClasses, selectDesc, response.rows, "onchange");
                $(`#${fieldId}`).append(selectString);
            }
        });
    }

    queryString = () => {
        this.queryNfilter = "";
        if (this.limit !== "") this.queryNfilter += `?limit=${this.limit}`;
        if (this.offset !== "" && this.queryNfilter !== "") this.queryNfilter += `&offset=${this.offset}`;
    }

    show = (recId) => getData(`${this.basePath}/${recId}`).then((rdata) => ((rdata) && (rdata.count)) ? rdata.rows : []);

    delete = (recId) => deleteData({}, `${this.basePath}/${recId}`).then((rdata) => rdata);

    update = (recId) => putData(this.formData, `${this.basePath}/${recId}`).then((rdata) => rdata);

    read = (qString="") => {
        this.queryString();
        if (qString !== "") this.queryNfilter += (this.queryNfilter !== "") ? `&${qString}` :  `?${qString}`; 
        return getData(`${this.basePath}${this.queryNfilter}`).then((rdata) => {
            return rdata;
        });
    }

    create = () => postData(this.formData, this.basePath).then((rdata) => rdata);

    showThisPage = (pageId) => {
        let containerNodes = document.querySelectorAll(".recDisplay");
        let formMenuNodes = document.querySelectorAll(".form-menus");
        containerNodes.forEach(item => item.style.display = "none");
        formMenuNodes.forEach((item) => {
            item.classList.remove("active-form-menu");
        });

        if ((document.querySelector(`#${pageId}`).className.includes("form-menus")) || (pageId === "recDisplay")) {
            let dsMenuId = (pageId === "recDisplay") ? "reportsMenu" : pageId;
            if (document.querySelector(`#${dsMenuId}`)) {
                document.querySelector(`#${dsMenuId}`).classList.add("active-form-menu");
            }
        }

        let currId = (pageId === "recDisplay" || pageId === "reportsMenu") ? "recDisplay" : `${pageId}Container`;
        document.querySelector(`#${currId}`).style.display = "block";
    }

    userLogin = () => {
        const data = {};
        for (const pair of new FormData(document.getElementById('userLoginForm'))) {
            data[pair[0]] = pair[1];
        }
        postData(data, '/users/login').then((rdata) => {
            if (rdata.status === true) {
                localStore(rdata.data.token, 'userToken', 'add');
                setTimeout(() => {
                    window.location.href = "html/home.html";
                }, 1000);
            } else {
                alert(rdata.message);
            }
        }).catch((error) => {
            console.log(error);
        });
    }

    userRegister = () => {
        const data = {};
        for (const pair of new FormData(document.getElementById('userRegisterForm'))) {
            data[pair[0]] = pair[1];
            if (!pair[1]) delete data[pair[0]];
        }

        if (!data['names']) {
            alert("Enter Names!"); document.querySelector("#names").focus();return;
        }

        if (!data['email']) {
            alert("Enter E-mail!"); document.querySelector("#email").focus();return;
        }

        if (!data['phoneNum']) {
            alert("Enter Phone Number!"); document.querySelector("#phoneNum").focus(); return;
        }

        if (!data['password']) {
            alert("Enter Password!"); document.querySelector("#password").focus(); return;
        }

        if (!data['userTypeId']) {
            alert("Select User Type!"); document.querySelector("#userTypeId").focus(); return;
        }

        postData(data, '/users').then((rdata) => {
            if (rdata.status === true) {
                localStore(rdata.data.token, 'userToken', 'add');
                setTimeout(() => {
                    window.location.href = "html/home.html";
                }, 1000);
            } else {
                alert(rdata.message);
            }
        }).catch((error) => {
            console.log(error);
        });
    }

    passwordReset = () => {
        const data = {};
        for (const pair of new FormData(document.getElementById('userPassResetForm'))) {
            data[pair[0]] = pair[1];
        }
        postData(data, '/users/reset').then((rdata) => {
            if (rdata.status === true) {
                localStore(rdata.data.token, 'userToken', 'add');
                setTimeout(() => {
                    //window.location.href = "html/index.html";
                }, 1000);
            } else {
                alert(rdata.message);
            }
        }).catch((error) => {
            console.log(error);
        });
    }


    queryParams = (url) => {
        const params = {};
        const parser = document.createElement('a');
        parser.href = url;
        const query = parser.search.substring(1);
        const vars = query.split('&');
        for (let i = 0; i < vars.length; i++) {
            let pair = vars[i].split('=');
            if (pair[0].trim() !== "") params[pair[0]] = decodeURIComponent(pair[1]);
        }
        return params;
    }


    setFormEdit = (currUrl) => {
        const qString = this.queryParams(currUrl);
        const isValidObj = notEmpty(qString);
        if (isValidObj) {
            this.renderToForm(qString.recId);
        }
    }


    resolveReportSelection = () => {
        const tableNode = document.querySelector("#recDisplay table");
        tableNode.addEventListener('click', (e) => {
            let nodeType = e.target.type;
            if (nodeType === "checkbox") {
                let checkedIds = [];
                let reportCheckboxes = document.querySelectorAll(".report-checkboxes");
                let [recId, recPos] = e.target.id.split("=====");
                if ((+recId === 0) && (+recPos === 0)) {
                    let checkAll = document.getElementById(e.target.id).checked;
                    reportCheckboxes.forEach((item) => item.checked = checkAll);
                }
                reportCheckboxes.forEach((item) => (item.checked) ? checkedIds.push(item.id) : ""); 
                this.selectedRecords = checkedIds;     
                deleteAllChecked.style.display = (this.selectedRecords.length) ? "block" : "none";           
            }
        });
    }


    resolveUploadDataSelection = () => {
        const tableNode = document.querySelector("#uploadsMenuContainer table");
        tableNode.addEventListener('click', (e) => {
            let nodeType = e.target.type;
            if (nodeType === "checkbox") {
                let checkedIds = [];
                let reportCheckboxes = document.querySelectorAll(".report-checkboxes");
                let [recId, recPos] = e.target.id.split("=====");
                if ((+recId === 0) && (+recPos === 0)) {
                    let checkAll = document.getElementById(e.target.id).checked;
                    reportCheckboxes.forEach((item) => item.checked = checkAll);
                }
                reportCheckboxes.forEach((item) => (item.checked) ? checkedIds.push(item.id) : ""); 
                this.selectedUploadRecords = checkedIds; 
                //uploadPostBtn.style.display = (this.selectedUploadRecords.length) ? "block" : "none";          
            }
        });
    }


    renderUploadHeader = () => {
        this.uploadHeaderNode.insertAdjacentHTML("beforeend", this.tabObj.tableHeader(this.tableHead, "", "iupload")); //upload-header-col
    }


    displayUploadRecord = () => {
        this.uploadedData.forEach((item, pos) => {
            if (this.uploadBodyNode) {
                this.uploadBodyNode.insertAdjacentHTML("beforeend", this.tabObj.makeRow(this.resolveUploadData(item, pos), "", "iupload"));
            } 
        });
    }


    initBatchDataUpload = (currObj) => {
        $('#excelfile').change(function () {
            let dataObj = new dataHandler("render_table");
            dataObj.initDataHandler();
            setTimeout(() => {
                currObj.uploadedData = dataObj.data;
                currObj.displayUploadRecord();
                currObj.resolveUploadDataSelection();
            }, 1000);
        });
        let doFileUploadObj = document.querySelector("#doFileUploadPost");
        if (doFileUploadObj) {
            doFileUploadObj.addEventListener('click', (e) => {
                this.uploadHandler();
            });
        } else {
            alert("File Upload Fail!");
        }
    }

    resolveSelectedRecordsForUpload = () => {
        let selectedRecord = this.selectedUploadRecords.map(item => item.split("=====")[1]).map(item => this.uploadedData[+item - 1]);
        let dataColumns = {};
        let toExempt = ["chkBox", "id"];
        for (let item in this.tableHead) {
            if (!toExempt.includes(item)) {
                dataColumns[this.tableHead[item]] = item;
            }
        }
        
        selectedRecord.forEach((item, pos) => {
            let bodyFields = {};
            for(let itm in item) {
                bodyFields[dataColumns[itm]] = item[itm];
            }
            this.finalSelectedRecordsForUpload.push(bodyFields);
        });
    }
}


class TableMaker {
    constructor(showColumn={}) {
        this.showColumn = showColumn;
    }

    tableHeader = (recordObj={}, rowcls="", iType="") => {
        if (recordObj.constructor !== Object) return;
        let rowDisplay = "";
        rowDisplay += `<tr class="${rowcls}">`;
        for (let column in recordObj) {
            let columnValue = recordObj[column];
            let colcls = this.showColumn[column]['hclass'] ?? "";
            if (this.showColumn[column][iType]) rowDisplay += `<th class="${colcls}">${columnValue}</th>`;
        }
        rowDisplay += `</tr>`;
        return rowDisplay;
    }

    makeRow = (recordObj={}, rowcls="", iType="") => {
        if (recordObj.constructor !== Object) return;
        let rowDisplay = "";
        rowDisplay += `<tr class="${rowcls}">`;
        for (let column in recordObj) {
            let columnValue = recordObj[column];
            let colcls = columnValue['class'] ?? this.showColumn[column]['bclass'] ?? "";
            if (this.showColumn[column][iType]) rowDisplay += `<td class="${colcls}">${columnValue['value']}</td>`;
        }
        rowDisplay += `</tr>`;
        return rowDisplay;
    }    
}
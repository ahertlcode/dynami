import fetch from 'isomorphic-fetch';
    const base_url = 'http://localhost:8000';

    export function imageUrl() {
        return base_url+"/story-files";
    }

    export function dpUrl() {
        return base_url;
    }

    export function checkUser(point="") {
        const retObj = {};
        const tokenUser = localStore('','tokenUser','get') || "";
        if (tokenUser != "") {
            postData({}, '/users/check').then((rdata) => {
                if ((rdata) && notEmpty(rdata)) {
                    localStore(rdata['isValid'], 'isAuthenticated', 'add');
                    localStore(rdata['isAdmin'], 'isAdmin', 'add');
                }
            });
        }
    }

    export function postData(data, dUrl) {
        const tokenUser = localStore('','tokenUser','get') || "";
        return fetch(`${base_url}${dUrl}`, {
            method: 'POST',
            mode: 'cors',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + tokenUser
            }
        })
        .then(response => response.json())
        .catch((error) => {
            console.log(error);
        });
    }

    export function postImageData(data, dUrl) {
        const tokenUser = localStore('','tokenUser','get') || "";
        return fetch(`${base_url}${dUrl}`, {
            method: 'POST',
            mode: 'cors',
            body: JSON.stringify(data),
            headers: {
                'Authorization': 'Bearer ' + tokenUser,
                'content-type': 'multipart/form-data'
            }
        })
        .then(response => response.json())
        .catch((error) => {
            console.log(error);
        });
    }

    export async function postDataWithFile(data = {}, url = '') {
        const tokenUser = localStore('','tokenUser','get') || "";
        //let reqDataType = (dataTpe != "") ? dataTpe : 'application/json';
        const response = await fetch(`${base_url}${url}`, {
            method: 'POST', // *GET, POST, PUT, DELETE, etc.
            mode: 'cors', // no-cors, *cors, same-origin
            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
            credentials: 'same-origin', // include, *same-origin, omit
            headers: {
                //'Content-Type': reqDataType,
                'Authorization': 'Bearer ' + tokenUser,
                // 'Content-Type': 'application/x-www-form-urlencoded',
            },
            redirect: 'follow', // manual, *follow, error
            referrerPolicy: 'no-referrer', // no-referrer, *client
            body: data //body data type must match "Content-Type" header
        });
        return await response.json(); //parses JSON response into native JavaScript objects
    }


    export async function putDataWithFile(data = {}, url = '') {
        const tokenUser = localStore('','tokenUser','get') || "";
        //let reqDataType = (dataTpe != "") ? dataTpe : 'application/json';
        const response = await fetch(`${base_url}${url}`, {
            method: 'PUT', // *GET, POST, PUT, DELETE, etc.
            mode: 'cors', // no-cors, *cors, same-origin
            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
            credentials: 'same-origin', // include, *same-origin, omit
            headers: {
                //'Content-Type': reqDataType,
                'Authorization': 'Bearer ' + tokenUser,
                // 'Content-Type': 'application/x-www-form-urlencoded',
            },
            redirect: 'follow', // manual, *follow, error
            referrerPolicy: 'no-referrer', // no-referrer, *client
            body: data //body data type must match "Content-Type" header
        });
        return await response.json(); //parses JSON response into native JavaScript objects
    }

    export function putData(data, dUrl) {
        const tokenUser = localStore('','tokenUser','get') || "";
        return fetch(`${base_url}${dUrl}`, {
            method: 'PUT',
            mode: 'cors',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + tokenUser
            }
        })
        .then(response => response.json())
        .catch((error) => {
            console.log(error);
        });
    }


    export function getData(dUrl) {
        const tokenUser = localStore('','tokenUser','get') || "";
        return fetch(`${base_url}${dUrl}`, {
            method: 'GET',
            mode: 'cors',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + tokenUser
            }
        })
        .then(response => response.json())
        .catch((error) => {
            console.log(error);
        });
    }


    export function deleteData(data, dUrl) {
        const tokenUser = localStore('','tokenUser','get') || "";
        return fetch(`${base_url}${dUrl}`, {
            method: 'DELETE',
            mode: 'cors',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + tokenUser
            }
        })
        .then(response => response.json())
        .catch((error) => {
            console.log(error);
        });
    }


    export function notEmpty(obj) {
        return Object.keys(obj).length !== 0 && obj.constructor === Object
    }
    

    export function notEmptyArray(array) {
        return (Array.isArray(array) && (array.length > 0));
    }


    export function localStore(arr, desc, actn) {
        try {
            let retn;
            if (typeof(Storage) !== undefined) {
                if (actn === "add") {
                    let stringifyd = JSON.stringify(arr);
                    if (localStorage.setItem(desc, stringifyd)) { 
                        retn = true; 
                    } else { 
                        retn = false; 
                    }
                } else if(actn === "get") {
                    retn = localStorage.getItem(desc);
                    if (retn !== "{}") { 
                        retn = JSON.parse(retn); 
                    }
                } else if(actn === "remove") {
                    if (localStorage.removeItem(desc)) { 
                        retn = true; 
                    } else { 
                        retn = false; 
                    }
                }
            } else {/**Sorry! No Web Storage support..**/}
            return retn;
        } catch (e) { console.log(e); }
    }

    export function dateFormat(inDate) {
        const d = new Date(inDate);
        return d.toDateString();
    }


    export function padStr(input, width, charc='') {
        return String(input).padStart(width, charc || '0');
    }


    export function formatRecordCount(inValue) {
        if (inValue <= 0) return 0;

        let retval;
        let divisor = 1;
        let desc = "";
        inValue = +inValue;
        if ((inValue >= 1000) && (inValue < 1000000)) {
            divisor = 1000;
            desc = "k";
        } else if ((inValue >= 1000000) && (inValue < 1000000000)) {
            divisor = 1000000;
            desc = "m";
        } else if ((inValue >= 1000000000) && (inValue < 1000000000000)) {
            divisor = 1000000000;
            desc = "b";
        } else if ((inValue >= 1000000000000) && (inValue < 1000000000000000)) {
            divisor = 1000000000000;
            desc = "tr";
        }

        retval = /\d+(\.\d{0,1})?/.exec(String(inValue/divisor))[0];
        let fval = (/\.0$/.test(retval)) ? retval.substring(0, retval.length - 2) : retval;
        return `${fval}${desc}`;
    }

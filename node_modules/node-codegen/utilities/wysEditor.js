class wysEditor {
    constructor(confObj={}) {
        this.docObj = null;
        this.fileSend = [];
        this.editMode = false;
        this.fileStack = [];
        this.eFileNames = [];
        this.filePrefix = confObj.filePrefix || "";
        this.dsMaxFileSize = confObj.maxFileSize || 0;
        this.dsMaxFileCount = confObj.maxFileCount || 0;
        this.dsFileServerUrl = confObj.fileServerUrl || "";
        this.editorContainer = Date.now();
    }

    wysEditorPutContents(contentValue) {    
        document.getElementById(editorContainer).innerHTML = contentValue;
    }

    wysEditorClear() {    
        if (document.getElementById(this.editorContainer)) {
            document.getElementById(this.editorContainer).innerHTML = "";
        }
    }

    wysEditorContents() {    
        const wysTextValue = document.getElementById(this.editorContainer);
        const allFiles = wysTextValue.querySelectorAll('.allEditorFiles');
        if (allFiles.length > 0) {
            for(let node of allFiles) {
                if (!node.className.includes("resolvedFiles")) {
                    node.classList.add("resolvedFiles");
                    let filePath = this.dsFileServerUrl+"/"+node.id;
                    node.src = filePath;
                }
            }
        }
        return [wysTextValue.innerHTML, this.fileSend, this.eFileNames];
    }


    renderWysEditor() {
        this.includeStyles();
    
        const wysContainer = this.createAnyElement('div', 'wysContainer', "");
        const iconsContainer = this.createAnyElement('div', 'iconsContainer', "");
        iconsContainer.id = this.editorContainer + "iconHeader";
    
        const isEditable = this.createAnyElement("div", "isEditable");
        isEditable.contentEditable = true;
        isEditable.id = this.editorContainer;
        //isEditable.placeholder = "wysTextValue";
    
        const actionSet = this.wysConfig();
        for(let item in actionSet) {
            let currItem = actionSet[item];
            if (currItem.use) iconsContainer.append(this.dispEditorIcon(item, currItem.use, currItem.icon));
        }
    
        const fileComponent = this.createAnyElement("input", "fileComponent");
        fileComponent.type = "file";
        fileComponent.id = "fileElem";
        fileComponent.multiple = true;
        isEditable.append(fileComponent);
    
        wysContainer.append(iconsContainer);
        wysContainer.append(isEditable);
    
        this.resolveEditorActions();
        return wysContainer;
    }


    includeStyles() {
        const link = document.createElement("link");
        link.href = "https://cdn.materialdesignicons.com/5.0.45/css/materialdesignicons.min.css";
        link.type = "text/css";
        link.rel = "stylesheet";
        document.head.appendChild(link);
        this.setStyles();
    }
    

    createAnyElement(type, clsName="", txtNode="") {
        let elem = document.createElement(type);
        if (clsName !== "") elem.className += clsName;
        if (txtNode !== "") elem.append(document.createTextNode(txtNode));
        return elem;
    };


    dispEditorIcon(nameElm, useElm, iconClass) {
        if (useElm) {
            let iconDisp = "", label = null, li = this.createAnyElement("li"), a = this.createAnyElement('a');
            const navbarr = this.createAnyElement("ul", "navbarr"), eachIcons = this.createAnyElement('div', 'eachIcons', "");
            let i = this.createAnyElement('i', `mdi ${iconClass} iconsize wsy-act-trigger`);
    
            i.id = nameElm;
            a.href = "#";
            a.title = nameElm;
            if (nameElm == "fileUpload") {
                label = this.createAnyElement('label');
                label.setAttribute('for', 'fileElem');
                label.appendChild(i);
            } else {
                label = i;
            }
            a.appendChild(label);
            li.appendChild(a);
    
            navbarr.append(li);
            eachIcons.append(navbarr);
            return eachIcons;
        }
    }


    initDoc() {
        this.docObj = document.getElementById(this.editorContainer); 
        if (this.editMode) this.setDocMode(true);
    }
    
    
    formatDoc(sCmd, sValue) {
        if (this.validateMode()) { 
            document.execCommand(sCmd, false, sValue); 
            this.docObj.focus(); 
        }
    }
    
    
    validateMode() { 
        if (!this.editMode) return true ;
        alert("Uncheck Show HTML");
        this.docObj.focus();
        return false;
    }
    
    
    setDocMode(bToSource) {
        var oContent;
        if (bToSource) {
            oContent = document.createTextNode(docObj.innerHTML);
            docObj.innerHTML = "";
            var oPre = document.createElement("pre");
            docObj.contentEditable = false;
            oPre.id = "sourceText";
            oPre.contentEditable = true;
            oPre.appendChild(oContent);
            docObj.appendChild(oPre);
            document.execCommand("defaultParagraphSeparator", false, "div");
        } else {
            if (document.all) {
                docObj.innerHTML = docObj.innerText;
            } else {
                oContent = document.createRange();
                oContent.selectNodeContents(docObj.firstChild);
                docObj.innerHTML = oContent.toString();
            }
            docObj.contentEditable = true;
        }
        docObj.focus();
    }
    

    resolveEditorActions() {
        setTimeout(() => {
            this.initDoc();
            const specialCommands = ["formatblock","createlink","source","codetag","fileUpload"];
            document.getElementById(this.editorContainer + "iconHeader").addEventListener('click', c => { 
                let currId = c.target.id;
                if (specialCommands.includes(currId)) {
                    if (currId === "formatblock") {
                        this.formatDoc('formatblock','blockquote');
                    } else if (currId === "createlink") {
                        this.createLinkHandler();
                    } else if (currId === "source") {
                        this.showSourceHandler();
                    } else if (currId === "codetag") {
                        this.codetageHandler();
                    } else if (currId === "fileUpload") {
                        this.fileUploader();
                    } 
                } else {
                    this.formatDoc(currId);
                }
            });
        },500);
    }


    createLinkHandler() {
        var sLnk = prompt('Write the URL here','http://');
        if (sLnk && sLnk !='' && sLnk != 'http://') this.formatDoc('createlink',sLnk);
    }


    showSourceHandler() {
        if (this.editMode) {
            this.setDocMode(!this.editMode);
            this.editMode = !this.editMode;
        } else {
            this.setDocMode(!this.editMode);
            this.editMode = !this.editMode;
        }
    }


    codetageHandler() {
        let selection = window.getSelection().toString();
        let wrappedselection = '<span style="background-color:red">' + selection + '</span>';
        document.execCommand('insertHTML', false, wrappedselection);
    }


    fileUploader() {
        let fileObj = document.getElementById('fileElem');                    
        let txtareaval = document.getElementById(this.editorContainer);
        fileObj.addEventListener('change', e => {
            
            let files = fileObj.files; 
            let pCount = 0;
            for (let file of files) {
                let isImage = false, isVideo = false, isAudio = false;
                if (file.type.startsWith('image/')) isImage = true;
                if (file.type.startsWith('video/')) isVideo = true;
                if (file.type.startsWith('audio/')) isAudio = true;
                
                let fileString = `${file['name']}~~~${file['size']}~~~${file['type']}`;
                if (this.fileStack.includes(fileString)) file = null;
                
                if ((file) && (this.dsMaxFileCount === 0)) {
                    alert("File upload is not allowed");
                    file = null;
                };

                if ((file) && (this.fileStack.length === this.dsMaxFileCount)) {
                    alert("Allowed file count reached");
                    file = null;
                }
                
                if ((file) && (Number(file['size']) > (this.dsMaxFileSize * 1024 * 1000))) {
                    alert(((Number(file['size'])/1000)/1024) + "mb is more than the " + this.dsMaxFileSize + "mb allowed");
                    file = null;
                }

                if (file != null) {
                    this.fileStack.push(fileString);
                    let fileNode = null;
                    if (isVideo) {
                        fileNode = document.createElement("VIDEO");
                        fileNode.setAttribute("controls", "controls");
                        fileNode.classList.add("postVideos");
                    } else if (isImage) {
                        fileNode  = document.createElement("img");
                        fileNode.classList.add("postImages");
                    } else if (isAudio) {
                        fileNode  = document.createElement("audio");
                        fileNode.controls = "controls";
                        fileNode.classList.add("postAudios");
                    }
                    fileNode.classList.add("allEditorFiles");

                    const extension = /.w+$/.exec(file.name);
                    const newFileName = `${this.filePrefix}${Date.now()}${pCount}${extension}`;
                    
                    fileNode.id = `${newFileName}`;
                    this.eFileNames.push(newFileName);
                    this.fileSend.push(file);

                    fileNode.file = file;
                    txtareaval.appendChild(fileNode);
                    var reader      = new FileReader();
                    reader.onload   = (function(aImg) { return function(e) { aImg.src = e.target.result; }; })(fileNode);
                    reader.readAsDataURL(file);

                    var br = document.createElement("br");
                    txtareaval.appendChild(br);
                    txtareaval.focus();
                }
                pCount++;
            }
        });
    }


    setStyles() {
        var style = document.createElement('style');
    
        style.innerHTML = `
        img {max-height: 100%;max-width: 100%; display: block;}
        a {text-decoration: none;}
        a:hover{text-decoration:none;cursor:pointer;}
        label{margin-bottom: 0 !important;}
    
        .navbarr {list-style-type:none;margin:0 4px;padding:0;overflow:hidden}
        .navbarr li{float:left;background-color:none;margin:3px 3px 3px 0;}
        .navbarr li a{display:block;padding:1px 5px;color:#999 !important;}
        .navbarr li a:hover{color: #666666 !important}
    
        .iconsize{font-size: 20px !important;}
        .yellocolr{color: yellow;}
        #sourceText {padding: 35px 15px 15px 15px;min-height: 100px;}
    
        blockquote {
            font-style: italic;
            font-family: Georgia, Times, "Times New Roman", serif;
            padding: 2px 0;
            border-style: solid;
            border-color: #ccc;
            border-width: 0;
        }
    
        ol,ul,dl {
            *margin-right: 0px;
            padding: 0 40px;
        }
    
        h1,h2,h3,h4,h5,h6 {
            font-weight: normal;
            line-height: 1.2;
        }
    
    
        hr { border: 0px;
            border-top: 1px solid #ccc;
        }
    
        img.right {
            border: 1px solid #ccc;
            float: right;
            margin-left: 15px;
            padding: 5px;
        }
    
        .wysContainer {
            width:100%;
            height:auto;
            background-color: #fff;
            float:left;
            border: 1px solid #ddd;
        }
    
        .iconsContainer {
            width:100%;border-bottom: 1px solid #ddd;height:auto;float:left;background-color: #fff;padding-bottom:0px;
        }
    
        .eachIcons {
            width:auto;background-color:none;margin:5px 0 0 5px;float: left;
        }
    
        .isEditable {
            width:98%; margin:1%; float:left;min-height: 100px;background-color:none;outline:none;word-wrap: break-word
        }
    
        .fileComponent {
            display: none;
        }
        `;
        document.head.appendChild(style);
    }


    wysConfig() {
        return {
            undo: {
                use: true,
                icon: "mdi-undo"
            },
            redo: {
                use: true,
                icon: "mdi-redo"
            },
            bold: {
                use: true,
                icon: "mdi-format-bold"
            },
            createlink: {
                use: true,
                icon: "mdi-link-variant"
            },
            italic: {
                use: true,
                icon: "mdi-format-italic"
            },
            underline: {
                use: true,
                icon: "mdi-format-underline"
            },
            fileUpload: {
                use: true,
                icon: "mdi-image-plus"
            },
            justify: {
                use: false,
                icon: "mdi-format-align-justify"
            },
            justifyleft: {
                use: true,
                icon: "mdi-format-align-left"
            },
            justifycenter: {
                use: true,
                icon: "mdi-format-align-center"
            },
            justifyright: {
                use: true,
                icon: "mdi-format-align-right"
            },
            formatblock: {
                use: true,
                icon: "mdi-format-quote-open"
            },
            insertunorderedlist: {
                use: false,
                icon: "mdi-format-list-bulleted"
            },
            insertorderedlist: {
                use: false,
                icon: "mdi-format-list-numbers"
            },
            outdent: {
                use: false,
                icon: "mdi-format-indent-decrease"
            },
            indent: {
                use: false,
                icon: "mdi-format-indent-increase"
            },
            cut: {
                use: false,
                icon: "mdi-content-cut"
            },
            source: {
                use: false,
                icon: "mdi-code-string"
            },
            codetag: {
                use: false,
                icon: "mdi-code-tags"
            },
            wysVideo: {
                use: false,
                icon: "mdi-star"
            }
        };
    }
}    
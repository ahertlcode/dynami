const base_url = 'http://localhost:8000';
let userTokenDesc = "userToken";

const logOutUser = () => {
    localStore(false, 'isAuthenticated', 'add');
    localStore(false, 'isAdmin', 'add');
    localStore("", 'uId', 'add');
    localStore('', userTokenDesc, 'add');
    window.location.href = "../index.html";
}

const currUserToken = () => {
    const userToken = localStore('',userTokenDesc,'get') || "";
    if (userToken.trim() === "") logOutUser();
    return userToken;
}

const checkLoginStatus = (redirectTo="") => {
    const userToken = localStore('',userTokenDesc,'get') || "";
    if (userToken.trim() === "") logOutUser();
    return postData({}, '/users/check').then((rdata) => {
        if ((!rdata.status) && (rdata.code === "AUT_02" || rdata.code === "AUT_03")) {
            localStore(false, 'isAuthenticated', 'add');
            localStore("", 'uId', 'add');
            if (redirectTo) window.location.href = redirectTo;
        } else {
            localStore(rdata['isValid'], 'isAuthenticated', 'add');
            localStore(rdata['isAdmin'], 'isAdmin', 'add');
            localStore(rdata['uId'], 'uId', 'add');
        }
        return true;
    });
}

const resolveIncomingData = (rdata) => {
    if (rdata) {
        if ((!rdata.status) && (rdata.code === "AUT_02" || rdata.code === "AUT_03")) {
            localStore(false, 'isAuthenticated', 'add');
            //window.location.href = "index.html";
        }
        return true;
    } else {
        return false;
    }
}

const showProcessIcon = () => {
    let storiesMenu = document.querySelector('#storiesMenu');
    let currentLoadingIcons = document.getElementById("processLoadingIcons");
    if (!currentLoadingIcons) {
        let processLoadingIcons = document.createElement('span');
        processLoadingIcons.className += "spinner-grow spinner-grow-sm";
        processLoadingIcons.id = 'processLoadingIcons';
        processLoadingIcons.style.color = 'green';
        storiesMenu.append(processLoadingIcons);
    }
}


const hideProcessIcon = () => {
    let processLoadingIcons = document.getElementById("processLoadingIcons");
    if (processLoadingIcons) processLoadingIcons.remove();
}


function imageUrl() {
    return base_url+"/story-files";
}


function dpUrl() {
    return base_url;
}


function checkUser(point="") {
    const retObj = {};
    const userToken = localStore('',userTokenDesc,'get') || "";
    if (userToken != "") {
        postData({}, '/users/check').then((rdata) => {
            if ((rdata) && notEmpty(rdata)) {
                localStore(rdata['isValid'], 'isAuthenticated', 'add');
                localStore(rdata['isAdmin'], 'isAdmin', 'add');
                localStore(rdata['uId'], 'uId', 'add');
            } else {
                logOutUser();
            }
        }).catch(error => console.log(error));
    }
}


function postData(data, dUrl) {
    const userToken = localStore('',userTokenDesc,'get') || "";
    return fetch(`${base_url}${dUrl}`, {
        method: 'POST',
        mode: 'cors',
        body: JSON.stringify(data),
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + userToken
        }
    })
    .then(response => response.json())
    .catch((error) => {
        console.log(error);
    });
}


function postImageData(data, dUrl) {
    const userToken = localStore('',userTokenDesc,'get') || "";
    return fetch(`${base_url}${dUrl}`, {
        method: 'POST',
        mode: 'cors',
        body: JSON.stringify(data),
        headers: {
            'Authorization': 'Bearer ' + userToken,
            'content-type': 'multipart/form-data'
        }
    })
    .then(response => response.json())
    .catch((error) => {
        console.log(error);
    });
}


async function postDataWithFile(data = {}, url = '') {
    const userToken = localStore('',userTokenDesc,'get') || "";
    //let reqDataType = (dataTpe != "") ? dataTpe : 'application/json';
    const response = await fetch(`${base_url}${url}`, {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        mode: 'cors', // no-cors, *cors, same-origin
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        credentials: 'same-origin', // include, *same-origin, omit
        headers: {
            //'Content-Type': reqDataType,
            'Authorization': 'Bearer ' + userToken,
            // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: 'follow', // manual, *follow, error
        referrerPolicy: 'no-referrer', // no-referrer, *client
        body: data //body data type must match "Content-Type" header
    });
    return await response.json(); //parses JSON response into native JavaScript objects
}


async function putDataWithFile(data = {}, url = '') {
    const userToken = localStore('',userTokenDesc,'get') || "";
    //let reqDataType = (dataTpe != "") ? dataTpe : 'application/json';
    const response = await fetch(`${base_url}${url}`, {
        method: 'PUT', // *GET, POST, PUT, DELETE, etc.
        mode: 'cors', // no-cors, *cors, same-origin
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        credentials: 'same-origin', // include, *same-origin, omit
        headers: {
            //'Content-Type': reqDataType,
            'Authorization': 'Bearer ' + userToken,
            // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: 'follow', // manual, *follow, error
        referrerPolicy: 'no-referrer', // no-referrer, *client
        body: data //body data type must match "Content-Type" header
    });
    return await response.json(); //parses JSON response into native JavaScript objects
}


function putData(data, dUrl) {
    const userToken = localStore('',userTokenDesc,'get') || "";
    return fetch(`${base_url}${dUrl}`, {
        method: 'PUT',
        mode: 'cors',
        body: JSON.stringify(data),
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + userToken
        }
    })
    .then(response => response.json())
    .catch((error) => {
        console.log(error);
    });
}


function getData(dUrl) {
    const userToken = localStore('',userTokenDesc,'get') || "";
    return fetch(`${base_url}${dUrl}`, {
        method: 'GET',
        mode: 'cors',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + userToken
        }
    })
    .then(response => response.json())
    .catch((error) => {
        console.log(error);
    });
}


function deleteData(data, dUrl) {
    const userToken = localStore('',userTokenDesc,'get') || "";
    return fetch(`${base_url}${dUrl}`, {
        method: 'DELETE',
        mode: 'cors',
        body: JSON.stringify(data),
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + userToken
        }
    })
    .then(response => response.json())
    .catch((error) => {
        console.log(error);
    });
}


function notEmpty(obj) {
    return Object.keys(obj).length !== 0 && obj.constructor === Object
}


function notEmptyArray(array) {
    return (Array.isArray(array) && (array.length > 0)) ? true : false;
}


function localStore(arr, desc, actn) {
    try {
        let retn;
        if (typeof(Storage) !== undefined) {
            if (actn === "add") {
                let stringifyd = JSON.stringify(arr);
                if (localStorage.setItem(desc, stringifyd)) { 
                    retn = true; 
                } else { 
                    retn = false; 
                }
            } else if(actn === "get") {
                retn = localStorage.getItem(desc);
                if (retn !== "{}") { 
                    retn = JSON.parse(retn); 
                }
            } else if(actn === "remove") {
                if (localStorage.removeItem(desc)) { 
                    retn = true; 
                } else { 
                    retn = false; 
                }
            }
        } else {/**Sorry! No Web Storage support..**/}
        return retn;
    } catch (e) { console.log(e); }
}


function dateFormat(inDate) {
    const d = new Date(inDate);
    return d.toDateString();
}


function padStr(input, width, charc='') {
    return String(input).padStart(width, charc || '0');
}


function formatRecordCount(inValue) {
    if (inValue <= 0) return 0;

    let retval;
    let divisor = 1;
    let desc = "";
    inValue = +inValue;
    if ((inValue >= 1000) && (inValue < 1000000)) {
        divisor = 1000;
        desc = "k";
    } else if ((inValue >= 1000000) && (inValue < 1000000000)) {
        divisor = 1000000;
        desc = "m";
    } else if ((inValue >= 1000000000) && (inValue < 1000000000000)) {
        divisor = 1000000000;
        desc = "b";
    } else if ((inValue >= 1000000000000) && (inValue < 1000000000000000)) {
        divisor = 1000000000000;
        desc = "tr";
    }
    retval = /\d+(\.\d{0,1})?/.exec(String(inValue/divisor))[0];
    let fval = (/\.0$/.test(retval)) ? retval.substring(0, retval.length - 2) : retval;
    return `${fval}${desc}`;
}


function makeSelect(id="", name="", cls="", desc="", values={}, onchange="") {
    let selectDisplay = "";
    if (notEmptyArray(values)) {
      values.forEach((item) => {
        selectDisplay += `<option value="${item.id}">${item.names}</option>`;
      });
    }
    return selectDisplay;
}
const pluralize = require('pluralize');
const { queryHandler,getPFkeys, notEmpty } = require('../mysql/db');

const columnsToExempt = ['createdBy', 'modifiedBy', 'createdAt', 'updatedAt'];

const makeComponentName = (tableName) => {
    return tableName.charAt(0).toUpperCase() + tableName.substring(1);
}

module.exports.makeReactComponents = (tableName) => {
    const componentName = makeComponentName(tableName);
    return queryHandler(`DESC ${tableName}`).then((result) => {
        const tableColumns = [];
        const forKeys = [];
        const forInKeyVal  = [];
        result.forEach((col) => {
            if (col['Key'] === "MUL") {
                forInKeyVal.push(col.Field);
            }
            tableColumns.push(col.Field);
        });

        return getPFkeys(tableName, forInKeyVal.join("','"), "", "").then((foreignKeys) => {
            let file_includes = "";
            let modelIncludeString = "";
            const toIncludeArr = [];

            if (notEmpty(foreignKeys, Array)) {
                foreignKeys.forEach((item) => {
                    const toInclude = makeComponentName(item['referenced_table_name']);
                    if (!toIncludeArr.includes(toInclude)) {
                        file_includes += `const ${toInclude} = require(".././models").${toInclude};\n`;
                        modelIncludeString += `{ model: ${toInclude}, attributes: ['id'] },`;
                        toIncludeArr.push(toInclude);
                    }
                });
            }

            let makeString = "";
            makeString += initComponentCreation(tableName, tableColumns, result, foreignKeys, componentName);
            /* makeString += makeCreate(modelName, tableColumns, file_includes);
            makeString += makeRead(modelName, tableColumns, foreignKeys);
            makeString += makeShow(modelName);
            makeString += makeUpdate(modelName, tableColumns);
            makeString += makeRemove(modelName, tableColumns, modelIncludeString); */
            return { makeString };
        });
    }).catch((error) => {
        throw error;
    });
};


const initComponentCreation = (tableName, tableColumns, result, foreignKeys, componentName) => {
    const nameLower = tableName.toLowerCase();
    let compDisp = "";
    compDisp += `import React, { Component } from 'react';\n`;
    compDisp += `import  { Redirect, Link } from 'react-router-dom';\n`;
    compDisp += `import { postData, getData, deleteData, notEmptyArray, localStore, dateFormat, padStr, putData } from '../Actions/Actions';\n\n`;

    compDisp += `class ${componentName} extends Component {\n`;
    compDisp += `    constructor(props) {\n`;
    compDisp += `        super(props);\n`;
    //State
    compDisp += `        this.state = {\n`; 
    compDisp +=             stateDisplay(tableColumns, foreignKeys, nameLower);
    compDisp += `        }\n`;
    compDisp += `    }\n`;

    //DidMount
    compDisp +=          didMountDisplay(foreignKeys, nameLower);

    //Action Methods
    compDisp +=          actionMethods(nameLower)

    //
    compDisp +=          renderMethod(result, componentName, tableColumns, foreignKeys, tableName);
    compDisp += `};\n\n`;

    compDisp += `export default ${componentName};\n`;
    return compDisp;
}

const stateDisplay = (tableColumns, foreignKeys, nameLower) => {
    compDisp = "";
    tableColumns.forEach(item => {
        if (!columnsToExempt.includes(item)) {
            compDisp += `            ${item}: '',\n`;
        }
    });
    compDisp += `            ${nameLower}Record: [],\n`;
    if (notEmpty(foreignKeys, Array)) {
        foreignKeys.forEach((item) => {
            const forKey = item['column_name'];
            if (!columnsToExempt.includes(forKey)) {
                compDisp += `            ${forKey}Select: [],\n`;
            }
        });
    }
    return compDisp;
};


const didMountDisplay = (foreignKeys, nameLower) => {
    compDisp = "";
    compDisp += `\n    componentDidMount() {\n`;
    compDisp += `        getData('/${nameLower}').then((rdata) => {\n`;
    compDisp += `            this.setState({['${nameLower}Record']: rdata});\n`;
    compDisp += `        });\n`;
    if (notEmpty(foreignKeys, Array)) {
        foreignKeys.forEach((item) => {
            const refTable = item['referenced_table_name'].toLowerCase(); //column_name
            const forKey = item['column_name'];

            if (!columnsToExempt.includes(forKey)) {
                compDisp += `        getData('/${refTable}').then((rdata) => {\n`;
                compDisp += `            this.setState({['${forKey}Select']: rdata});\n`;
                compDisp += `        });\n`;
            }
        });
    }
    compDisp += `    }\n\n`;
    return compDisp;
}


const actionMethods = (nameLower) => {
    let compDisp = "";
    compDisp += `    inputChangeHandler = (event) => {\n`;
    compDisp += `        this.setState({ [event.target.name]: event.target.value });\n`;
    compDisp += `    }\n\n`;

    compDisp += `    createHandler = (event) => {\n`;
    compDisp += `        event.preventDefault();\n`;
    compDisp += `        if (this.state.id !== "") {\n`;
    compDisp += `            putData(this.state, \`/${nameLower}/\${this.state.id}\`).then((rdata) => {\n`;
    compDisp += `                this.setState({['${nameLower}Record']: rdata});\n`;
    compDisp += `            });\n`;
    compDisp += `        } else {\n`;
    compDisp += `            postData(this.state, '/${nameLower}').then((rdata) => {\n`;
    compDisp += `                this.setState({['${nameLower}Record']: rdata});\n`;
    compDisp += `            });\n`;
    compDisp += `        }\n`;
    compDisp += `    }\n\n`;

    compDisp += `    deleteRec = (event) => {\n`;
    compDisp += `        event.preventDefault();\n`;
    compDisp += `        deleteData({}, \`/${nameLower}/\${event.target.id}\`).then((rdata) => {\n`;
    compDisp += `            this.setState({['${nameLower}Record']: rdata});\n`;
    compDisp += `        });\n`;
    compDisp += `    }\n\n`;

    return compDisp;
}


const renderMethod = (result, componentName, tableColumns, foreignKeys, tableName) => {

    const nameLower = tableName.toLowerCase();
    let renderDisp = "";

    columnsToExempt.forEach((elem) => {
        let itemIndex = tableColumns.indexOf(elem);
        if (itemIndex !== -1) {
            tableColumns.splice(itemIndex,1);
        }
    });

    renderDisp += `    render() {\n\n`; 
    renderDisp += `        const { ${tableColumns.join(", ")} } = this.state;\n\n`;

    //Dropdown Select 
    let fkArray = [];
    let refTables = {};
    if (notEmpty(foreignKeys, Array)) {
        foreignKeys.forEach((item) => {
            const forKey = item['column_name'];
            //const refTable = item['referenced_table_name'].toLowerCase();
            fkArray.push(forKey);
            refTables[forKey] = pluralize.singular(makeComponentName(item['referenced_table_name']));
            if (!columnsToExempt.includes(forKey)) {
                renderDisp += `        let ${forKey}List = "";\n`; 
                renderDisp += `        if (notEmptyArray(this.state.${forKey}Select)) {\n`; 
                renderDisp += `            ${forKey}List = this.state.${forKey}Select.map((item, index) =>\n`;
                renderDisp += `                <option key={index} value={item['id']}>{item['names']}</option>\n`;
                renderDisp += `            );\n`;
                renderDisp += `        }\n\n`; 
            }
        });
        renderDisp += `\n`;
    }

    renderDisp += `        let tableDisplay = "";\n`;
    renderDisp += `        if (notEmptyArray(this.state.${nameLower}Record)) {\n`;
    renderDisp += `            tableDisplay = this.state.${nameLower}Record.map((item, index) =>\n`;
    renderDisp += `                <tr key={index}>\n`;

    tableColumns.forEach(item => {
        if (!columnsToExempt.includes(item)) {
            if (fkArray.includes(item)) {
                renderDisp += `                    <td>{item['${refTables[item]}']['names']}</td>\n`;
            } else {
                renderDisp += `                    <td>{item['${item}']}</td>\n`;
            }
        }
    });

    renderDisp += `                     <td><a id={item['id']} href="#" onClick={this.deleteRec}>Delete</a></td>\n`;
    renderDisp += `                </tr>\n`;
    renderDisp += `            );\n`;
    renderDisp += `        }\n\n`;

    renderDisp += `        return (\n`; 
    renderDisp += `            <div>\n`;
    renderDisp += `                <div>\n`;
    renderDisp += `                    <form onSubmit={this.createHandler} style={{padding:'30px 40px 50px 40px'}}>\n`;
    renderDisp += `                        <h2 style={{textAlign:'center', marginBottom:'30px'}}>${componentName}</h2>\n`;

    result.forEach((colval) => {
        const typeExtract = /(\w+) ?(\((\d*\,?\d+?)\))?/.exec(colval['Type']);
        let colType = (typeExtract[1]) ? typeExtract[1] : "";
        let colSize = (typeExtract[3]) ? typeExtract[3] : "";
        let colLabel = makeComponentName(colval.Field);
        let formDisplay = "";

        if (colval['Field'] === 'id' && colval['Key'] === 'PRI') {
            renderDisp += `                        <input\n`;
            renderDisp += `                         type="hidden" id="${colval.Field}"\n`;
            renderDisp += `                         name="${colval.Field}" value={${colval.Field}}\n`;
            renderDisp += `                         onChange={this.inputChangeHandler}\n`;
            renderDisp += `                        />\n\n`;
        } else {
            switch(colType.toUpperCase()) {
                case "TINYINT":
                case "SMALLINT":
                case "INT":
                case "MEDIUMINT":
                case "BIGINT": 
                case "FLOAT":
                case "DOUBLE":
                    if (colval['Key'] === 'MUL') {
                        formDisplay = doInputSelect(colval, colLabel);
                    } else {
                        formDisplay = doInputTypes(colval, 'number', colLabel);
                    }
                break;
    
                case "DATETIME":
                case "TIMESTAMP":
                    formDisplay = doInputTypes(colval,'datetime-local',colLabel);
                break;
    
                case "DATE":
                    formDisplay = doInputTypes(colval,'date',colLabel);
                break;   
    
                case "TIME":
                    formDisplay = doInputTypes(colval,'time',colLabel);
                break; 
    
                case "YEAR":
                    formDisplay = doInputTypes(colval,'date',colLabel);
                break;
    
                case "TINYTEXT":
                case "TEXT":
                case "MEDIUMTEXT":
                case "LONGTEXT": 
                case "TINYBLOB":
                case "BLOB":
                case "MEDIUMBLOB":
                case "LONGBLOB": 
                formDisplay = doTextArea(colval,colLabel);
                break;
    
                case "VARCHAR":
                    formDisplay = doInputTypes(colval,'text',colLabel);
                break;
    
                case "CHAR":
                if (colSize == 1) {
                    formDisplay = doInputCheckBox(colval, colLabel); 
                }
            }
        }
        
        if (!columnsToExempt.includes(colval['Field'])) {
            renderDisp += formDisplay;
        } else {
            renderDisp += "";
        }
        
    });

    renderDisp += `                        <button type="submit">Submit</button>\n`;
    renderDisp += `                    </form>\n`;
    renderDisp += `                </div>\n\n`;

    renderDisp += `                <div className="table-wrap">\n`;
    renderDisp += `                    <table className="table table-striped">\n`;
    renderDisp += `                        <thead>\n`;
    renderDisp += `                            <tr>\n`;

    tableColumns.forEach(item => {
        if (!columnsToExempt.includes(item)) {
            renderDisp += `                                <th>${makeComponentName(item)}</th>\n`;
        }
    });

    renderDisp += `                                <th>Action</th>\n`;
    renderDisp += `                            </tr>\n`;
    renderDisp += `                        </thead>\n`;
    renderDisp += `                        <tbody>\n`;
    renderDisp += `                            { tableDisplay || [] }\n`;
    renderDisp += `                        </tbody>\n`;
    renderDisp += `                    </table>\n`;
    renderDisp += `                </div>\n`;

    renderDisp += `            </div>\n`;
    renderDisp += `        );\n`;
    renderDisp += `    }\n`;

    return renderDisp;
};


const doInputTypes = (colval, type, colLabel) => {
    renderDisp  = "";
    renderDisp += `                        <div className="form-group">\n`;
    renderDisp += `                            <label htmlFor="${colval.Field}">${colLabel}:</label>\n`;
    renderDisp += `                            <input\n`;
    renderDisp += `                             type="${type}" id="${colval.Field}"\n`;
    renderDisp += `                             name="${colval.Field}" value={${colval.Field}}\n`;
    renderDisp += `                             onChange={this.inputChangeHandler}\n`;
    renderDisp += `                             className="form-control"\n`;
    renderDisp += `                            />\n`;
    renderDisp += `                        </div>\n`;
    return renderDisp;
}


const doTextArea = (colval, colLabel) => {
    renderDisp  = "";
    renderDisp += `                        <div className="form-group">\n`;
    renderDisp += `                            <label htmlFor="${colval.Field}">${colLabel}:</label>\n`;
    renderDisp += `                            <textarea\n`;
    renderDisp += `                             id="${colval.Field}"\n`;
    renderDisp += `                             name="${colval.Field}" value={${colval.Field}}\n`;
    renderDisp += `                             onChange={this.inputChangeHandler}\n`;
    renderDisp += `                             className="form-control"\n`;
    renderDisp += `                            />\n`;
    renderDisp += `                        </div>\n`;
    return renderDisp;
};


const doInputCheckBox = (colval, colLabel) => {
    renderDisp  = "";
    renderDisp += `                        <div className="custom-control custom-checkbox mb-3">\n`;
    renderDisp += `                            <input type="checkbox"\n`;
    renderDisp += `                             id="${colval.Field}"\n`;
    renderDisp += `                             name="${colval.Field}" value={${colval.Field}}\n`;
    renderDisp += `                             onChange={this.inputChangeHandler}\n`;
    renderDisp += `                             className="custom-control-input" />\n`;
    renderDisp += `                            <label className="custom-control-label" htmlFor="${colval.Field}">${colLabel}</label>\n`;
    renderDisp += `                        </div>\n`;
    return renderDisp;
};


const doInputSelect = (colval, colLabel) => {
    renderDisp  = "";
    if (!columnsToExempt.includes(colval.Field)) {
        renderDisp += `                        <div className="form-group">\n`;
        renderDisp += `                            <label htmlFor="${colval.Field}">${colLabel}:</label>\n`;
        renderDisp += `                            <select\n`;
        renderDisp += `                             id="${colval.Field}"\n`;
        renderDisp += `                             name="${colval.Field}" value={${colval.Field}}\n`;
        renderDisp += `                             onChange={this.inputChangeHandler}\n`;
        renderDisp += `                             className="form-control">\n`;
        renderDisp += `                                <option>Select ${colLabel}</option>\n`;
        renderDisp += `                                \${${colval.Field}List}\n`;
        renderDisp += `                            </select>\n`;
        renderDisp += `                        </div>\n`;
    } else {
        renderDisp += "";
    }    
    return renderDisp;
};
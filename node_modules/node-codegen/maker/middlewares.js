const { queryHandler } = require('../mysql/db');


module.exports.makeMiddleWare = (tableName) => {
    return queryHandler(`DESC ${tableName}`).then((result) => {
        const fileColumns = [];
        const tableColumns = [];
        let hasUsersTable = false;
        result.forEach((col, pos) => {
            tableColumns.push(col.Field);
            if ((/picture$/.test(col.Field)) || (/Picture$/.test(col.Field))|| (/video$/.test(col.Field)) || (/Video$/.test(col.Field))
                || (/audio$/.test(col.Field))|| (/Audio$/.test(col.Field))  || (col.Field.toLowerCase() === "mediaurl") 
                || (/file$/.test(col.Field)) || (/File$/.test(col.Field))) {
                fileColumns.push(col.Field);
            }
        });

        if (tableName.toLowerCase() === "users") hasUsersTable = true;
        
        let middleWareFiles = {};
        
        if (hasUsersTable) {
            middleWareFiles.authFile = doAuthentication();
        }
        if (fileColumns.length > 0) {
            middleWareFiles.fileFile = imageUploadMiddleWare(tableName, fileColumns);
        }
        return middleWareFiles;
    }).catch((error) => {
        throw error;
    });
};


const doAuthentication = () => {
    let authString = "";
    authString += `const jwt = require('jsonwebtoken');\n\n`;
    authString += `module.exports = (request, response, next) => {\n`;
    authString += `    try {\n`;
    authString += `        const token = request.headers.authorization.split(' ')[1];\n`;
    authString += `        jwt.verify(token, 'RANDOM_TOKEN_SECRET', (error, decodedToken) => {\n`;
    authString += `            if ((error) || (!decodedToken)) {\n`;
    authString += `                response.status(401).json({\n`;
    authString += `                    "code": "AUT_02",\n`;
    authString += `                    "message": "The apikey is invalid.",\n`;
    authString += `                    "field": "API-KEY"\n`;
    authString += `                });\n`;
    authString += `            }\n`;
    authString += `            const { userId } = decodedToken;\n`;
    authString += `            const payLoadParam = userId.split("!~+=");\n`;
    authString += `            request.body.currUserId = payLoadParam[0] || "";\n`;
    authString += `            request.body.currUserEmail = payLoadParam[1] || "";\n`;
    authString += `            request.body.currUserRole = payLoadParam[2] || 0;\n`;
    authString += `            next();\n`;
    authString += `        });\n`;
    authString += `    } catch(e) {\n`;
    authString += `        response.status(401).json({\n`;
    authString += `            error: 'User Authentication failed, please try again!',\n`;
    authString += `        });\n`;
    authString += `    }\n`;
    authString += `};\n`;
    return authString;
};


const imageUploadMiddleWare = (tableName, fileColumns) => {
    let imageString = "";
    imageString += `const multer = require("multer");\n\n`;
    imageString += `const storage = multer.diskStorage({\n`;
    imageString += `    destination : (request, file, callback) => {\n`;
    imageString += `        callback(null, 'public/${tableName}');\n`;
    imageString += `    },\n`;
    imageString += `    filename : (request, file, callback) => {\n`;
    imageString += `        const extension = /.\w+$/.exec(file.originalname);\n`;
    imageString += `        const newFileName = \`\${Date.now()}\${extension}\`;\n`;
    imageString += `        callback(null, newFileName);\n`;
    imageString += `    }\n`;
    imageString += `});\n`;

    if (fileColumns.length > 1) {
        let fileString = [];
        fileColumns.forEach((item) => {
            fileString.push(`{ name: '${item}', maxCount: 1 }`);
        });
        imageString += `module.exports = multer({storage}).fields([${fileString.join(", ")}]);\n`;
    } else {
        imageString += `module.exports = multer({storage}).single('${fileColumns[0]}');\n`;
    }
    return imageString;
};
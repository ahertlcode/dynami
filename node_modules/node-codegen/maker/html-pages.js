const pluralize = require('pluralize');
const { queryHandler,getPFkeys, notEmpty } = require('../mysql/db');

let appName = "Edufy";

const columnsToExempt = ['createdBy', 'modifiedBy', 'createdAt', 'updatedAt'];

const makeComponentName = (tableName) => {
    return tableName.charAt(0).toUpperCase() + tableName.substring(1);
}

const makeSingularName = (tableName) => {
    const pluralName = pluralize.singular(tableName);
    return pluralName.charAt(0).toUpperCase() + pluralName.substring(1);
}

const doFilterInputSelect = (colval, colLabel) => {
    renderDisp  = "";
    let singularName = makeSingularName(colval.Field);
    if (!columnsToExempt.includes(colval.Field)) {
        renderDisp += `            <div class="form-group" id="${colval.Field.toLowerCase()}-wrap">\n`;
        renderDisp += `                <label for="${colval.Field}">${colLabel}:</label>\n`;
        renderDisp += `                    <select name="${colval.Field}" id="${colval.Field}" class="form-control form-control-sm">\n`;
        renderDisp += `                    <option value="">Select ${singularName}</option>\n`;
        renderDisp += `                </select>\n`;
        renderDisp += `            </div>\n`;
    } else {
        renderDisp += "";
    }    
    return renderDisp;
};


const reportTemplate = (result, tableName, foreignKeys) => {

    let reportFilterString = "";
    let dateFilterDisplay  = "";
    let columnsCheckBoxex  = "";
    let resultCount = result.length;
    let fkeyCount = 1;
    result.forEach((colval, pos) => {
        const typeExtract = /(\w+) ?(\((\d*\,?\d+?)\))?/.exec(colval['Type']);
        let colType  = (typeExtract[1]) ? typeExtract[1] : "";
        let colSize  = (typeExtract[3]) ? typeExtract[3] : "";
        let colLabel = makeComponentName(colval.Field);
        if (colval['Key'] === 'MUL') {
            let singularName = makeSingularName(colval.Field);
            if (!columnsToExempt.includes(colval.Field)) {
                if (fkeyCount === 1 || fkeyCount%3 === 1) reportFilterString += `                            <div class="form-row">\n`;
                reportFilterString += `                                        <div class="form-group col-sm-4" id="${colval.Field.toLowerCase()}-wrap">\n`;
                reportFilterString += `                                            <label for="${colval.Field}">${colLabel}:</label>\n`;
                reportFilterString += `                                            <select name="${colval.Field}" id="${colval.Field}" class="form-control form-control-sm">\n`;
                reportFilterString += `                                                <option value="">Select ${singularName}</option>\n`;
                reportFilterString += `                                            </select>\n`;
                reportFilterString += `                                        </div>\n`;
                if (fkeyCount%3 === 0 || fkeyCount === foreignKeys.length) reportFilterString += `                                    </div>\n`;
                fkeyCount+=1;
            }
        }

        let curPos = pos + 1;
        if (["DATE", "DATETIME"].includes(colType.toUpperCase())) {
            dateFilterDisplay += `<option value="${colval.Field}">${makeComponentName(colval.Field)}</option>`;
        }

        if (curPos === 1 || curPos%4 === 1) {
            if (curPos === 1) {
                columnsCheckBoxex += `<div class="row">\n`;
            } else {
                columnsCheckBoxex += `                                    <div class="row">\n`;
            }
        }
        columnsCheckBoxex += `                                            <div class="col-sm-3">\n`;
        columnsCheckBoxex += `                                            <div class="custom-control custom-checkbox mb-3">\n`;
        columnsCheckBoxex += `                                                <input type="checkbox" class="custom-control-input" id="${colval.Field}" name="${colval.Field}">\n`;
        columnsCheckBoxex += `                                                <label class="custom-control-label chk-label" for="${colval.Field}">${makeComponentName(colval.Field)}</label>\n`;
        columnsCheckBoxex += `                                            </div>\n`;
        columnsCheckBoxex += `                                        </div>\n`;
        if (curPos%4 === 0 || curPos === resultCount) {
            columnsCheckBoxex += `                                    </div>\n`;
        }
    });

    let reportString = "";
    reportString += `<!DOCTYPE html>\n`;
    reportString += `<html lang="en">\n`;
    reportString += `    <head>\n`;
    reportString += `        <meta charset="UTF-8">\n`;
    reportString += `        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n`;
    reportString += `        <title>${appName} - ${makeComponentName(tableName)}</title>\n`;
    reportString += `        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">\n`;
    reportString += `        <link rel="stylesheet" href="https://cdn.materialdesignicons.com/5.0.45/css/materialdesignicons.min.css">\n`;
    reportString += `        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>\n`;
    reportString += `        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>\n`;
    reportString += `        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>\n`;
    reportString += `        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>\n`;
    reportString += `        <script src="https://use.fontawesome.com/releases/v5.12.1/js/all.js" data-auto-replace-svg="nest"></script>\n`;
    reportString += `        <link rel="stylesheet" href="../css/index.css">\n`;
    reportString += `    </head>\n`;
    reportString += `    <body>\n`;
    reportString += `        <nav class="navbar navbar-expand-sm bd-white fixed-top nav-style" id="headerMenu"></nav>\n`;
    reportString += `        <div class="container-fluid container-wrap">\n`;
    reportString += `            <div class="row">\n`;
    reportString += `                <div class="col-lg-1"></div>\n`;
    reportString += `                <div class="col-lg-10 col-md-12 col-sm-12" id="work-area">\n`;
    reportString += `                    <div class="content-wrapper">\n`;
    reportString += `                        <div class="header-wrapper" id="headerWrapper">\n`;
    reportString += `                            <div class="header-wrapper-items page-desc">\n`;
    reportString += `                                <span style="float: left;">\n`;
    reportString += `                                    <i id="deleteAllChecked" class="mdi mdi-delete-outline delete-all-icon"></i>\n`;
    reportString += `                                </span>\n`;
    reportString += `                                <span style="float: left;padding-top: 4px;">\n`;
    reportString += `                                    <i class="mdi mdi-database"></i>\n`;
    reportString += `                                    ${makeComponentName(tableName)} Reporting\n`;
    reportString += `                                </span>\n`;
    reportString += `                            </div>\n`;
    reportString += `                            <div class="header-wrapper-items hwi">\n`;
    reportString += `                                <a href="../html/${tableName.toLowerCase()}.html" class="form-menus">\n`;
    reportString += `                                    <i class="mdi mdi-plus"></i>\n`;
    reportString += `                                    New\n`;
    reportString += `                                </a>\n`;
    reportString += `                            </div>\n`;
    reportString += `                            <div class="header-wrapper-items hwi">\n`;
    reportString += `                                <span id="analyticsMenu" class="form-menus">\n`;
    reportString += `                                    <i class="mdi mdi-google-analytics"></i>\n`;
    reportString += `                                    Analytics\n`;
    reportString += `                                </span>\n`;
    reportString += `                            </div>\n`;
    reportString += `                            <div class="header-wrapper-items hwi">\n`;
    reportString += `                                <span id="filtersMenu" class="form-menus">\n`;
    reportString += `                                    <i class="mdi mdi-filter-outline"></i>\n`;
    reportString += `                                    Filters\n`;
    reportString += `                                </span>\n`;
    reportString += `                            </div>\n`;
    reportString += `                            <div class="header-wrapper-items hwi">\n`;
    reportString += `                                <span id="reportsMenu" class="form-menus">\n`;
    reportString += `                                    <i class="mdi mdi-format-list-bulleted-square"></i>\n`;
    reportString += `                                    Report\n`;
    reportString += `                                </span>\n`;
    reportString += `                            </div>\n`;
    reportString += `                        </div>\n`;
    reportString += `                        <div class="main-reporting-container">\n`;
    reportString += `                            <div id="recDisplay" class="recDisplay hideElem">\n`;
    reportString += `                                <table class='table table-striped'><thead></thead><tbody></tbody></table>\n`;
    reportString += `                            </div>\n`;
    reportString += `                            <div id="analyticsMenuContainer" class="recDisplay hideElem">\n`;
    reportString += `                                Analytics\n`;
    reportString += `                            </div>\n`;
    reportString += `                            <div id="filtersMenuContainer" class="recDisplay hideElem">\n`;
    reportString += `                                <form action="#" method="post" id="${tableName}FilterForm">\n`;
    reportString += `                                    <div id="${tableName}ColumnSelect" class="columns-filter-container">\n`;
    reportString += `                                        ${columnsCheckBoxex}`;
    reportString += `                                    </div>\n`;
    reportString += `                                    <div class="report-date-container">\n`;
    reportString += `                                        <div class="form-row">\n`;
    reportString += `                                            <div class="form-group col-sm-4">\n`;
    reportString += `                                                <label for="dateFilter">Date Type</label>\n`;
    reportString += `                                                <select name="dateFilter" id="dateFilter" class="form-control form-control-sm">\n`;
    reportString += `                                                    <option value="">Select Date Type</option>\n`;
    reportString += `                                                    ${dateFilterDisplay}\n`;
    reportString += `                                                </select>\n`;
    reportString += `                                            </div>\n`;
    reportString += `                                            <div class="form-group col-sm-4">\n`;
    reportString += `                                                <label for="reportdatefrom">Date From</label>\n`;
    reportString += `                                                <input type="date" name="reportdatefrom" id="reportdatefrom" class="form-control form-control-sm">\n`;
    reportString += `                                            </div>\n`;
    reportString += `                                            <div class="form-group col-sm-4">\n`;
    reportString += `                                                <label for="reportdateto">Date To</label>\n`;
    reportString += `                                                <input type="date" name="reportdateto" id="reportdateto" class="form-control form-control-sm">\n`;
    reportString += `                                            </div>\n`;
    reportString += `                                        </div>\n`;
    reportString += `                                    </div>\n`;
    reportString += `                                    <div class="report-filter-container">\n`;
    reportString += `                                        ${reportFilterString}`;
    reportString += `                                    </div>\n`;
    reportString += `                                    <button type="submit" class="btn btn-primary btn-sm">&nbsp;Filter&nbsp;</button>\n`;
    reportString += `                                        &nbsp;&nbsp;&nbsp;&nbsp;\n`;
    reportString += `                                    <button type="reset" class="btn btn-warning btn-sm">&nbsp;Clear Filter&nbsp;</button>\n`;
    reportString += `                                </form>\n`;
    reportString += `                            </div>\n`;
    reportString += `                        </div>\n`;
    reportString += `                    </div>\n`;
    reportString += `                </div>\n`;
    reportString += `                <div class="col-lg-1"></div>\n`;
    reportString += `            </div>\n`;
    reportString += `        </div>\n`;
    reportString += `    </body>\n`;
    reportString += `    <script src="../js/Actions.js"></script>\n`;
    reportString += `    <script src="../js/BaseObject.js"></script>\n`;
    reportString += `    <script src="../js/${tableName.toLowerCase()}.js"></script>\n`;
    reportString += `    <script>\n`;
    reportString += `        $(function(){\n`;
    reportString += `            checkLoginStatus("../index.html").then(response => {\n`;
    reportString += `                if (response) {\n`;
    reportString += `                    $("#headerMenu").load("../header-menu.html");\n`;
    reportString += `                    let ${makeSingularName(tableName)}Obj = new ${makeSingularName(tableName)}();\n`;        
    reportString += `                    headerWrapper.addEventListener('click', (e) => {\n`;
    reportString += `                        if (e.target.className.includes("form-menus")) {\n`;
    reportString += `                            ${makeSingularName(tableName)}Obj.showThisPage(e.target.id);\n`;
    reportString += `                        }\n`;
    reportString += `                    });\n`;
    reportString += `                    ${makeSingularName(tableName)}Obj.showThisPage("recDisplay");\n`;
    reportString += `                    ${makeSingularName(tableName)}Obj.initReporting();\n`;
    reportString += `                }\n`;
    reportString += `            });\n`;
    reportString += `        });\n`;
    reportString += `    </script>\n`;
    reportString += `</html>\n`;
    return reportString;
}


const formsTemplate = (result, tableName, foreignKeys) => {

    let includeEditorFile = false;
    result.forEach((colval) => {
        const typeExtract = /(\w+) ?(\((\d*\,?\d+?)\))?/.exec(colval['Type']);
        let colType = (typeExtract[1]) ? typeExtract[1] : "";
        if (['MEDIUMTEXT', 'LONGTEXT', 'MEDIUMBLOB', 'LONGBLOB', 'BLOB'].includes(colType.toUpperCase())) {
            includeEditorFile = true;
        }

        let isImageField = (/_picture$/.exec(colval.Field)) ? true : false;
        let isVideoField = (/_video$/.exec(colval.Field)) ? true : false;
        let isAudioField = (/_audio$/.exec(colval.Field)) ? true : false;
        if (isImageField || isVideoField || isAudioField) {
            let colFileType = "";
            if (isImageField) colFileType = "image";
            if (isVideoField) colFileType = "video";
            if (isAudioField) colFileType = "audio";

            /* filesHandlerCode += `        let ${colval.Field}Obj = document.querySelector("${colval.Field}");\n`;
            filesHandlerCode += `        if (${colval.Field}Obj) {\n`;
            filesHandlerCode += `            ${colval.Field}Obj.addEventListener('change', (e) => {\n`;
            filesHandlerCode += `                ${colval.Field}_${colFileType}.src = window.URL.createObjectURL(e.target.files[0]);\n`;
            filesHandlerCode += `            });\n`;
            filesHandlerCode += `        }\n\n`;
            removeFilesValues += `if ('${colval.Field}' in this.formData) delete this.formData['${colval.Field}'];`; */
        }
    });


    let formsString = "";
    formsString += `<!DOCTYPE html>\n`;
    formsString += `<html lang="en">\n`;
    formsString += `    <head>\n`;
    formsString += `        <meta charset="UTF-8">\n`;
    formsString += `        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n`;
    formsString += `        <title>${appName} - ${makeSingularName(tableName)}</title>\n`;
    formsString += `        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">\n`;
    formsString += `        <link rel="stylesheet" href="https://cdn.materialdesignicons.com/5.0.45/css/materialdesignicons.min.css">\n`;
    formsString += `        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>\n`;
    formsString += `        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>\n`;
    formsString += `        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>\n`;
    formsString += `        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>\n`;
    formsString += `        <script src="https://use.fontawesome.com/releases/v5.12.1/js/all.js" data-auto-replace-svg="nest"></script>\n`;
    formsString += `        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.7.7/xlsx.core.min.js"></script>\n`;
    formsString += `        <script src="https://cdnjs.cloudflare.com/ajax/libs/xls/0.7.4-a/xls.core.min.js"></script>\n`;
    formsString += `        <link rel="stylesheet" href="../css/index.css">\n`;
    formsString += `    </head>\n`;
    formsString += `    <body>\n`;
    formsString += `        <nav class="navbar navbar-expand-sm bd-white fixed-top nav-style" id="headerMenu"></nav>\n`;
    formsString += `        <div class="container-fluid container-wrap">\n`;
    formsString += `            <div class="row">\n`;
    formsString += `                <div class="col-lg-1"></div>\n`;
    formsString += `                    <div class="col-lg-10 col-md-12 col-sm-12" id="work-area">\n`;
    formsString += `                        <div class="content-wrapper">\n`;
    formsString += `                            <div class="header-wrapper" id="headerWrapper">\n`;
    formsString += `                                <div class="header-wrapper-items page-desc">\n`;
    formsString += `                                    <i class="mdi mdi-format-columns"></i>\n`;
    formsString += `                                    ${makeComponentName(tableName)}\n`;
    formsString += `                                </div>\n`;
    formsString += `                                <div class="header-wrapper-items hwi">\n`;
    formsString += `                                    <a href="../report/${tableName.toLowerCase()}.html" class="form-menus">\n`;
    formsString += `                                        <i class="mdi mdi-format-list-bulleted-square"></i>\n`;
    formsString += `                                        Report\n`;
    formsString += `                                    </a>\n`;
    formsString += `                                 </div>\n`;
    formsString += `                                <div class="header-wrapper-items hwi">\n`;
    formsString += `                                    <span id="uploadsMenu" class="form-menus">\n`;
    formsString += `                                        <i class="mdi mdi-upload-outline"></i>\n`;
    formsString += `                                        Upload\n`;
    formsString += `                                    </span>\n`;
    formsString += `                                </div>\n`;

    formsString += `                                <div class="header-wrapper-items hwi">\n`;
    formsString += `                                    <span id="reportsMenu" class="form-menus">\n`;
    formsString += `                                        <i class="mdi mdi-plus"></i>\n`;
    formsString += `                                        New\n`;
    formsString += `                                    </span>\n`;
    formsString += `                                </div>\n`;

    formsString += `                            </div>\n`;
    formsString += `                            <div style="width: 100%; float: left; height: auto; margin-bottom: 20px;">\n`;
    formsString += `                                <div id="recDisplay" class="recDisplay hideElem">\n`;
    formsString += `                                    ${renderForm(result, tableName, foreignKeys)}\n`;
    formsString += `                                </div>\n`;
    formsString += `                                <div id="uploadsMenuContainer" class="recDisplay hideElem">\n`;
    formsString += `                                    <div class="upload-control-cont">\n`;
    formsString += `                                        <div style="float: left;">\n`;
    formsString += `                                            <label for="excelfile" class="upload-input-label">&#9668;&nbsp;Select Excel&nbsp;&#9658;</label>\n`;
    formsString += `                                            <input type="file" id="excelfile" name="filename" style="display: none;"/>\n`;
    formsString += `                                        </div>\n`;
    formsString += `                                        <div class="upload-data-actions" id="uploadPostBtn">\n`;
    formsString += `                                            <button id="doFileUploadPost" type="button" class="upload-data-post">U P L O A D</button>\n`;
    formsString += `                                        </div>\n`;
    formsString += `                                    </div>\n`;
    formsString += `                                    <table class='table table-striped'><thead></thead><tbody></tbody></table>\n`;
    formsString += `                                </div>\n`;
    formsString += `                            </div>\n`;
    formsString += `                        </div>\n`;
    formsString += `                    </div>\n`;
    formsString += `                <div class="col-lg-1"></div>\n`;
    formsString += `            </div>\n`;
    formsString += `        </div>\n`;
    formsString += `    </body>\n`;
    formsString += `    <script src="../js/Actions.js"></script>\n`;
    formsString += `    <script src="../js/BaseObject.js"></script>\n`;
    formsString += `    <script src="../js/${tableName.toLowerCase()}.js"></script>\n`;
    formsString += `    <script src="../js/excel-upload.js"></script>\n`;
    if (includeEditorFile) formsString += `    <script src="../js/wysEditor.js"></script>`;
    formsString += `    <script>\n`;
    formsString += `        $(function(){\n`;
    formsString += `            checkLoginStatus("../index.html").then(response => {\n`;
    formsString += `                if (response) {\n`;
    formsString += `                    $("#headerMenu").load("../header-menu.html");\n`;
    formsString += `                    let ${makeSingularName(tableName)}Obj = new ${makeSingularName(tableName)}();\n`;        
    formsString += `                    headerWrapper.addEventListener('click', (e) => {\n`;
    formsString += `                        if (e.target.className.includes("form-menus")) {\n`;
    formsString += `                            ${makeSingularName(tableName)}Obj.showThisPage(e.target.id);\n`;
    formsString += `                        }\n`;
    formsString += `                    });\n`;
    formsString += `                    ${makeSingularName(tableName)}Obj.showThisPage("recDisplay");\n`;
    formsString += `                    ${makeSingularName(tableName)}Obj.initFormActions();\n\n`;

    formsString += `                    //Initialize Form Editing\n`;
    formsString += `                    setTimeout(() => {\n`;
    formsString += `                        ${makeSingularName(tableName)}Obj.setFormEdit(window.location.href);\n`;
    formsString += `                    },10);\n\n`;
    formsString += `                    ${makeSingularName(tableName)}Obj.renderUploadHeader();\n`;
    formsString += `                    ${makeSingularName(tableName)}Obj.initBatchDataUpload(${makeSingularName(tableName)}Obj);\n`;
    formsString += `                }\n`;
    formsString += `            });\n`;
    formsString += `        });\n`;
    formsString += `    </script>\n`;
    formsString += `</html>\n`;
    return formsString;
}


const pageJsFile = (result, tableName, foreignKeys) => {
    let showColumnFlags   = "";
    let dontShowByDefault = ["createdBy", "modifiedBy", "createdAt", "updatedAt", "id"];
    let reportColumnDesc  = "";
    let reportingSetup    = "";
    let remvEmptyFkeys    = "";
    let selectInputCalls  = "";
    let forKeysArr        = [];
    let filterSelects     = "";
    let editorString      = "";
    let filesHandlerCode  = "";
    let removeFilesValues = "";
    let uploadDisplayStr  = "";
    let removeFkeys       = "";

    result.forEach((colval) => {
        const typeExtract = /(\w+) ?(\((\d*\,?\d+?)\))?/.exec(colval['Type']);
        let colType  = (typeExtract[1]) ? typeExtract[1] : "";
        let colSize  = (typeExtract[3]) ? typeExtract[3] : "";
        let colLabel = makeComponentName(colval.Field);
        //showColumnFlags  += (dontShowByDefault.includes(colval.Field)) ? `            ${colval.Field}: { idata: false, iupload: false },\n` : `            ${colval.Field}: { idata: true, iupload: true },\n`;

        let idataValue = 'true';
        let iuploadValue = 'true';
        if (dontShowByDefault.includes(colval.Field)) {
            idataValue = 'false';
            iuploadValue = 'false';
        } 
        if (colType.toUpperCase() === "CHAR") {
            iuploadValue = 'false';
        }
        showColumnFlags  += `            ${colval.Field}: { idata: ${idataValue}, iupload: ${iuploadValue} },\n`;

        reportColumnDesc += `            ${colval.Field}: '${colval.Field.toUpperCase()}',\n`;
        reportingSetup   += `            ${colval.Field}: { value: item.${colval.Field}, class: "" },\n`;
        uploadDisplayStr += `        if (item.${colval.Field.toUpperCase()}) dataObj.${colval.Field} = {value: item.${colval.Field.toUpperCase()}, class: ""};\n`;

        if (['MEDIUMTEXT', 'LONGTEXT', 'MEDIUMBLOB', 'LONGBLOB', 'BLOB'].includes(colType.toUpperCase())) {
            editorString += `        let ${colval.Field}EditorContainerObj = document.querySelector('#${colval.Field}EditorContainer');\n`;
            editorString += `        if (${colval.Field}EditorContainerObj) {\n`;
            editorString += `            let ${colval.Field}EditorObj = new wysEditor({\n`;
            editorString += `                filePrefix: "${colval.Field}",\n`;
            editorString += `                maxFileSize: 10,//mb\n`;
            editorString += `                maxFileCount: 10,\n`;
            editorString += `                fileServerUrl: \`\${imageUrl()}/${tableName}\`\n`;
            editorString += `            });\n`;
            editorString += `            ${colval.Field}EditorContainerObj.append(${colval.Field}EditorObj.renderWysEditor());\n`;
            editorString += `        }\n`;
            editorString += `        //Get editor current content\n`;
            editorString += `        //${colval.Field}EditorObj.wysEditorContents();\n`;
            editorString += `        //Put content in editor\n`;
            editorString += `        //${colval.Field}EditorObj.wysEditorPutContents();\n`;
            editorString += `        //To clear editor content\n`;
            editorString += `        //${colval.Field}EditorObj.wysEditorClear();\n\n\n`;
        }


        /////////////////////////////////////////////////////////////////
        let isImageField = (/_picture$/.exec(colval.Field)) ? true : false;
        let isVideoField = (/_video$/.exec(colval.Field)) ? true : false;
        let isAudioField = (/_audio$/.exec(colval.Field)) ? true : false;
        
        if (isImageField || isVideoField || isAudioField) {
            let colFileType = "";
            if (isImageField) colFileType = "image";
            if (isVideoField) colFileType = "video";
            if (isAudioField) colFileType = "audio";

            filesHandlerCode += `        let ${colval.Field}Obj = document.querySelector("${colval.Field}");\n`;
            filesHandlerCode += `        if (${colval.Field}Obj) {\n`;
            filesHandlerCode += `            ${colval.Field}Obj.addEventListener('change', (e) => {\n`;
            filesHandlerCode += `                ${colval.Field}_${colFileType}.src = window.URL.createObjectURL(e.target.files[0]);\n`;
            filesHandlerCode += `            });\n`;
            filesHandlerCode += `        }\n\n`;
            removeFilesValues += `if ('${colval.Field}' in this.formData) delete this.formData['${colval.Field}'];`;
        }
    });


    foreignKeys.forEach((item) => {
        if (!forKeysArr.includes(item['column_name'])) {
            let rqPath        = item['referenced_table_name'].toLowerCase();
            let column_name   = item['column_name'];
            let singularName  = makeSingularName(item['referenced_table_name']);
            selectInputCalls += `        if (document.querySelector('#${column_name}')) this.getSelectInput('/${rqPath}', "${column_name}", "${column_name}", "form-control", "Select ${singularName}");\n`;
            filterSelects    += `        if (document.querySelector('#${column_name}_filter')) this.getSelectInput('/${rqPath}', "${column_name}_filter", "${column_name}_filter", "form-control", "Select ${singularName}");\n`;
            remvEmptyFkeys   += `        if (('${column_name}' in this.formData) && (!this.formData['${column_name}'])) delete this.formData['${column_name}'];\n`;
            removeFkeys      += `                delete this.formData['${column_name}'];\n`;
            forKeysArr.push(item['column_name']);
        }
    });


    let pageJsFileString = "";
    pageJsFileString += `class ${makeSingularName(tableName)} extends BaseObject {\n`;
    pageJsFileString += `    constructor() {\n`;
    pageJsFileString += `        super();\n`;
    pageJsFileString += `        this.limit = 20;\n`;        
    pageJsFileString += `        this.displayRecord = [];\n`;
    pageJsFileString += `        this.sortBy = "";\n`;
    pageJsFileString += `        this.basePath = "/${tableName.toLowerCase()}";\n`;
    pageJsFileString += `        this.queryNfilter = "";\n`;
    pageJsFileString += `        this.formObject = document.getElementById('${makeComponentName(tableName)}Form1');\n\n`;

    pageJsFileString += `        this.tabObj = new TableMaker({\n`;
    pageJsFileString += `            chkBox:  { idata: true, iupload: true },\n`;
    pageJsFileString += `            srn:  { idata: true, iupload: false },\n`;
    pageJsFileString +=              showColumnFlags;
    pageJsFileString += `            recordAction: { idata: true, iupload: false },\n`;
    pageJsFileString += `            uploadStatus: { idata: false, iupload: true, hclass: "center-text", bclass: "center-text" }\n`;
    pageJsFileString += `        });\n\n`;

    pageJsFileString += `        this.tableHead = {\n`;
    pageJsFileString += `            chkBox: this.doCheckBox({id: 0}, 0),\n`;
    pageJsFileString += `            srn: "SRN",\n`;
    pageJsFileString +=              reportColumnDesc;
    pageJsFileString += `            recordAction: "ACTIONS",\n`;
    pageJsFileString += `            uploadStatus: "STATUS"\n`;
    pageJsFileString += `        }\n`;
    pageJsFileString += `    }\n\n\n`;


    pageJsFileString += `    uploadHandler = () => {\n`;
    pageJsFileString += `        this.resolveSelectedRecordsForUpload();\n`;
    pageJsFileString += `        if (this.finalSelectedRecordsForUpload.length) {\n`;
    pageJsFileString += `            this.finalSelectedRecordsForUpload.forEach((item, pos) => {\n`;
    pageJsFileString += `                this.formData = item;\n`;
    pageJsFileString += `                let rowNode = document.getElementById(this.selectedUploadRecords[pos]).closest('tr').lastElementChild.lastElementChild;\n`;
    pageJsFileString +=                  removeFkeys;
    pageJsFileString += `                this.create().then((response) => {\n`;
    pageJsFileString += `                    (response.status) ? rowNode.className += " mdi-check greencol" : rowNode.className += " mdi-close redcol";\n`;
    pageJsFileString += `                });\n`;
    pageJsFileString += `            });\n`;
    pageJsFileString += `        }\n`;
    pageJsFileString += `    }\n\n\n`;


    pageJsFileString += `    reportActions = (item) => {\n`;
    pageJsFileString += `        return \` `;
    pageJsFileString += `        <i id='toEdit==\${item['id']}' style='font-size: 20px;cursor:pointer' class="mdi mdi-pencil-outline toProcess"></i>&nbsp;&nbsp;\n`;
    pageJsFileString += `        <i id='toDelete==\${item['id']}' style='color:red;font-size: 20px;cursor:pointer' class="mdi mdi-delete-outline toProcess"></i>\n`;
    pageJsFileString += `        \`\n`;
    pageJsFileString += `    }\n\n\n`;


    pageJsFileString += `    doCheckBox = (item, currSrn) => {\n`;
    pageJsFileString += `        let itemId = \`\${item.id}=====\${currSrn}\`;\n`;
    pageJsFileString += `        return \`\n`;
    pageJsFileString += `        <div class="custom-control custom-checkbox">\n`;
    pageJsFileString += `            <input type="checkbox" class="custom-control-input report-checkboxes" id="\${itemId}" name="\${itemId}">\n`;
    pageJsFileString += `            <label class="custom-control-label" for="\${itemId}"></label>\n`;
    pageJsFileString += `        </div>\n`;
    pageJsFileString += `        \`\n`;
    pageJsFileString += `    }\n\n\n`;


    pageJsFileString += `    resolveTableData = (item, pos) => {\n`;
    pageJsFileString += `        let currSrn = (this.renderedRecordCount > this.limit) ? ((this.renderedRecordCount - this.limit) + pos + 1) : (pos + 1);\n`;
    pageJsFileString += `        return {\n`;
    pageJsFileString += `            chkBox:  { value: this.doCheckBox(item, currSrn), class: "" },\n`;
    pageJsFileString += `            srn: { value: currSrn, class: "" },\n`;
    pageJsFileString +=              reportingSetup;
    pageJsFileString += `            recordAction: { value: this.reportActions(item), class: ""}\n`;
    pageJsFileString += `        };\n`;
    pageJsFileString += `    }\n\n\n`;


    pageJsFileString += `    resolveUploadData = (item, pos) => {\n`;
    pageJsFileString += `        let currSrn = pos + 1;\n`;
    pageJsFileString += `        let dataObj = {};\n`;
    pageJsFileString += `        dataObj.chkBox = { value: this.doCheckBox({id: currSrn}, currSrn), class: "" },\n`;
    pageJsFileString += `        dataObj.srn = {value: currSrn, class: ""};\n`;
    pageJsFileString += `        dataObj.id = {value: currSrn, class: ""};\n`;
    pageJsFileString +=          uploadDisplayStr;
    pageJsFileString += `        dataObj.recordAction = {value: this.reportActions({id: currSrn}), class: ""};\n`;
    pageJsFileString += `        dataObj.uploadStatus = {value: \`<i class="mdi remove-node"></i>\`, class: "center-text"};\n`;
    pageJsFileString += `        return dataObj;\n`;
    pageJsFileString += `    }\n\n\n`;


    pageJsFileString += `    resolveFormData = () => {\n`;
    pageJsFileString += `        let frmData = new FormData(this.formObject);\n`;
    pageJsFileString += `        let checkboxIds = Array.from(document.querySelectorAll('#${tableName}Form1 input[type=checkbox]')).map(item => item.name);\n`;
    pageJsFileString += `        if (checkboxIds.length) checkboxIds.forEach(item => this.formData[item] = "N");\n`;
    pageJsFileString += `        for (const pair of frmData) {\n`;
    pageJsFileString += `            this.formData[pair[0]] = pair[1];\n`;
    pageJsFileString += `            let currNode = document.querySelector(\`#\${pair[0]}\`);\n`;
    pageJsFileString += `            if (currNode.type.toUpperCase() === "CHECKBOX") {\n`;
    pageJsFileString += `                this.formData[pair[0]] = (currNode.checked) ?  "Y" : "N";\n`;
    pageJsFileString += `            }\n`;
    pageJsFileString += `        }\n`;
    pageJsFileString +=          remvEmptyFkeys;
    if (removeFilesValues !== "") pageJsFileString +=         removeFilesValues;
    pageJsFileString += `    }\n\n\n`;


    pageJsFileString += `    renderTable = () => {\n`;
    pageJsFileString += `        this.read().then((items) => {\n`;
    pageJsFileString += `            if (items.count) this.totalRecordCount = items.count;\n`;
    pageJsFileString += `            if (notEmptyArray(items.rows)) {\n`;
    pageJsFileString += `                this.renderedRecordCount += items.rows.length;\n`;
    pageJsFileString += `                this.displayTableRecord(items.rows);\n`;
    pageJsFileString += `            }\n`;
    pageJsFileString += `        });\n`;
    pageJsFileString += `    }\n\n\n`;


    if (editorString !== "") {
        pageJsFileString += `    initEditor = () => {\n`;
        pageJsFileString += `        ${editorString}`;
        pageJsFileString += `    }\n\n\n`;
    }


    pageJsFileString += `    initFormActions = () => {\n`;
    pageJsFileString +=          selectInputCalls;
    if (editorString !== "") pageJsFileString += `        this.initEditor();\n`;
    if (filesHandlerCode !== "") pageJsFileString +=         filesHandlerCode;
    

    pageJsFileString += `        if (this.formObject) {\n`;
    pageJsFileString += `            this.formObject.addEventListener('submit', (event) => {\n`;
    pageJsFileString += `                event.preventDefault();\n`;
    pageJsFileString += `                this.resolveFormData();\n`;
    pageJsFileString += `                if (this.formData.id) {\n`;
    pageJsFileString += `                    this.update(this.formData.id).then((response) => {\n`;
    pageJsFileString += `                        this.updateResponse(response);\n`;
    pageJsFileString += `                    });\n`;
    pageJsFileString += `                } else {\n`;
    pageJsFileString += `                    this.create().then((response) => {\n`;
    pageJsFileString += `                        this.updateResponse(response);\n`;
    pageJsFileString += `                    });\n`;
    pageJsFileString += `                }\n`;
    pageJsFileString += `            });\n`;
    pageJsFileString += `        }\n`;

    if (tableName.toLowerCase() === "users") {
        pageJsFileString += `        \n`;
        pageJsFileString += `        const userLoginForm = document.querySelector("#userLoginForm");\n`;
        pageJsFileString += `        if (userLoginForm) {\n`;
        pageJsFileString += `            userLoginForm.addEventListener('submit', (e) => {\n`;
        pageJsFileString += `                e.preventDefault();\n`;
        pageJsFileString += `                this.userLogin();\n`;
        pageJsFileString += `            });\n`;
        pageJsFileString += `        }\n\n`;
        pageJsFileString += `        const userRegisterForm = document.querySelector("#userRegisterForm");\n`;
        pageJsFileString += `        if (userRegisterForm) {\n`;
        pageJsFileString += `            userRegisterForm.addEventListener('submit', (e) => {\n`;
        pageJsFileString += `                e.preventDefault();\n`;
        pageJsFileString += `                this.userRegister();\n`;
        pageJsFileString += `            });\n`;
        pageJsFileString += `        }\n\n`;
        pageJsFileString += `        const userPassResetForm = document.querySelector("#userPassResetForm");\n`;
        pageJsFileString += `        if (userPassResetForm) {\n`;
        pageJsFileString += `            userPassResetForm.addEventListener('submit', (e) => {\n`;
        pageJsFileString += `                e.preventDefault();\n`;
        pageJsFileString += `                this.passwordReset()\n`;
        pageJsFileString += `            });\n`;
        pageJsFileString += `        }\n\n`;    
    }
    pageJsFileString += `    }\n\n\n`;


    pageJsFileString += `    updateResponse = (response) => {\n`;
    pageJsFileString += `        if (response.status) {\n`;
    pageJsFileString += `            window.location.href = \`../report/${tableName.toLowerCase()}.html\`;\n`;
    pageJsFileString += `        } else {\n`;
    pageJsFileString += `            alert(response.message || "Action Aborted");\n`;
    pageJsFileString += `        }\n`;
    pageJsFileString += `    }\n\n\n`;


    pageJsFileString += `    initReporting = () => {\n`;
    pageJsFileString += `        this.renderTableHeader();\n`;
    pageJsFileString += `        this.renderTable();\n`;
    pageJsFileString +=          filterSelects;
    pageJsFileString += `        document.querySelector('#recDisplay').addEventListener('scroll', (event) => {\n`;
    pageJsFileString += `            let scrollNode = event.target;\n`;
    pageJsFileString += `            const isBottom = scrollNode.scrollTop + scrollNode.offsetHeight === scrollNode.scrollHeight;\n`;
    pageJsFileString += `            if (isBottom) {\n`;
    pageJsFileString += `                this.offset = this.limit+this.offset;\n`;                
    pageJsFileString += `                if (this.renderedRecordCount < this.totalRecordCount) {\n`;
    pageJsFileString += `                    this.renderTable();\n`;
    pageJsFileString += `                }\n`;
    pageJsFileString += `            }\n`;
    pageJsFileString += `        });\n\n`;

    pageJsFileString += `        document.querySelector("#recDisplay").addEventListener('click', (e) => {\n`;
    pageJsFileString += `            if (e.target.className.includes("toProcess")) {\n`;
    pageJsFileString += `                let [recAtion,  recId] = e.target.id.split("==");\n`;
    pageJsFileString += `                (recAtion.trim() === "toDelete") ? this.handleDelete(recId) : this.handleEdit(recId);\n`;
    pageJsFileString += `            }\n`;
    pageJsFileString += `        });\n`;
    pageJsFileString += `        this.resolveReportSelection();\n\n`;

    pageJsFileString += `        //Batch Delete\n`;
    pageJsFileString += `        document.querySelector("#deleteAllChecked").addEventListener('click', () => {\n`;
    pageJsFileString += `            let selected_records = this.selectedRecords.map((item) => item.split("=====")[0]);\n`;
    pageJsFileString += `            let rec_count = selected_records.length;\n`;
    pageJsFileString += `            if (rec_count) {\n`;
    pageJsFileString += `                selected_records.forEach((item, pos) => {\n`;
    pageJsFileString += `                    this.delete(item).then(response => {\n`;
    pageJsFileString += `                        if ((response.status) && ((pos+1) === rec_count)) location.reload();\n`;
    pageJsFileString += `                    });\n`;
    pageJsFileString += `                });\n`;
    pageJsFileString += `            }\n`;
    pageJsFileString += `        });\n`;
    pageJsFileString += `    }\n\n\n`;

    pageJsFileString += `    handleDelete = (recId) => {\n`;
    pageJsFileString += `        if (confirm("Confirm record "+recId+" deletion!!!")) {\n`;
    pageJsFileString += `            this.delete(recId).then(response => {\n`;
    pageJsFileString += `                alert(response.message);\n`;
    pageJsFileString += `                location.reload();\n`;
    pageJsFileString += `            });\n`;
    pageJsFileString += `        }\n`;
    pageJsFileString += `    }\n\n\n`;

    pageJsFileString += `    handleEdit = (recId) => {\n`;
    pageJsFileString += `        window.location.href = \`../html/${tableName.toLowerCase()}.html?recId=\${recId}\`;\n`;
    //pageJsFileString += `        setTimeout(() => {\n`;
    //pageJsFileString += `            this.renderToForm(recId);\n`;
    //pageJsFileString += `        },100);\n`;
    pageJsFileString += `    }\n`;
    pageJsFileString += `}\n`;
    return pageJsFileString;
}


const renderForm = (result, tableName, foreignKeys) => {
    let renderDisp = `<form action="#" method="post" id="${tableName}Form1">\n`;
        result.forEach((colval) => {
            const typeExtract = /(\w+) ?(\((\d*\,?\d+?)\))?/.exec(colval['Type']);
            let colType = (typeExtract[1]) ? typeExtract[1] : "";
            let colSize = (typeExtract[3]) ? typeExtract[3] : "";
            let colLabel = makeComponentName(colval.Field);
            let formDisplay = "";

            let isImageField = (/_picture$/.exec(colval.Field)) ? true : false;
            let isVideoField = (/_video$/.exec(colval.Field)) ? true : false;
            let isAudioField = (/_audio$/.exec(colval.Field)) ? true : false;

            let filesFormCode = "";
            if (isImageField || isVideoField || isAudioField) {
                let fileHtml = "";
                if (isImageField) fileHtml += `<img id="${colval.Field}_image" alt="" />`;
                if (isVideoField) fileHtml += `<video id="${colval.Field}_video" controls></video>`;
                if (isAudioField) fileHtml += `<audio id="${colval.Field}_audio" controls></audio>`;

                filesFormCode += `<div class="form-group">\n`;
                filesFormCode += `    <input id="${colval.Field}" name="${colval.Field}" type="file" accept="image/*" class="file-input-fields">\n`;
                filesFormCode += `    <label for="${colval.Field}" class="file-container">\n`;
                filesFormCode += `        ${fileHtml}\n`;
                filesFormCode += `    </label>\n`;
                filesFormCode += `</div>\n`;
            }

            if (isImageField || isVideoField || isAudioField) {
                renderDisp += filesFormCode;
            } else {
                if (colval['Field'] === 'id' && colval['Key'] === 'PRI') {
                    renderDisp += `    <input type="hidden" name="${colval.Field}" id="${colval.Field}">\n`;
                } else {
                    switch(colType.toUpperCase()) {
                        case "TINYINT":
                        case "SMALLINT":
                        case "INT":
                        case "MEDIUMINT":
                        case "BIGINT": 
                        case "FLOAT":
                        case "DOUBLE":
                            if (colval['Key'] === 'MUL') {
                                formDisplay = doInputSelect(colval, colLabel);
                            } else {
                                formDisplay = doInputTypes(colval, 'number', colLabel);
                            }
                        break;
            
                        case "DATETIME":
                        case "TIMESTAMP":
                            formDisplay = doInputTypes(colval,'datetime-local',colLabel);
                        break;
            
                        case "DATE":
                            formDisplay = doInputTypes(colval,'date',colLabel);
                        break;   
            
                        case "TIME":
                            formDisplay = doInputTypes(colval,'time',colLabel);
                        break; 
            
                        case "YEAR":
                            formDisplay = doInputTypes(colval,'date',colLabel);
                        break;
            
                        case "TINYTEXT":
                        case "TEXT":
                        case "MEDIUMTEXT":
                        case "LONGTEXT": 
                        case "TINYBLOB":
                        case "BLOB":
                        case "MEDIUMBLOB":
                        case "LONGBLOB": 
                        formDisplay = doTextArea(colval,colLabel,colType);
                        break;
            
                        case "VARCHAR":
                            formDisplay = doInputTypes(colval,'text',colLabel);
                        break;
            
                        case "CHAR":
                        if (colSize == 1) {
                            formDisplay = doInputCheckBox(colval, colLabel); 
                        }
                    }
                }
                
                if (!columnsToExempt.includes(colval['Field'])) {
                    renderDisp += formDisplay;
                } else {
                    renderDisp += "";
                }
            }
        });
        
        renderDisp += `    <button type="submit" class="btn btn-primary btn-sm">&nbsp;Submit Form&nbsp;</button>\n`;
        renderDisp += `        &nbsp;&nbsp;&nbsp;&nbsp;\n`;
        renderDisp += `    <button type="reset" class="btn btn-warning btn-sm">&nbsp;Clear Form&nbsp;</button>\n`;
        renderDisp += `</form>\n`;
    return renderDisp;
};


const renderJsFile = (result, tableName, foreignKeys) => {
        let recordColumn = "";
        let recordColumnHeader = "";
        let AllFilesHandlerCode = "";

        let forKeysArr = [];
        let removeThisValuesBeforeSubmit = "";
        
        //Dropdown Records
        let fkMaps = {};
        let drpdwnDisplay = "";
        foreignKeys.forEach((item) => {
            if (!forKeysArr.includes(item['column_name'])) {
                let rqPath       = item['referenced_table_name'].toLowerCase();
                let column_name  = item['column_name'];
                let singularName = makeSingularName(item['referenced_table_name']);
                fkMaps[column_name] = singularName;
                
                drpdwnDisplay += `if (document.querySelector('#${item['column_name']}')) {\n`;
                drpdwnDisplay += `    getData('/${rqPath}').then((${rqPath}) => {\n`;
                drpdwnDisplay += `        const ${singularName}Sel = makeSelect("${column_name}", "${column_name}", "form-control",\n`;
                drpdwnDisplay += `            "Select ${singularName}", ${rqPath}.rows, "onchange");\n`;
                drpdwnDisplay += `        $("#${item['column_name']}").append(${singularName}Sel);\n`;
                drpdwnDisplay += `    });\n`;
                drpdwnDisplay += `}\n\n`;
    
                removeThisValuesBeforeSubmit += `if (('${column_name}' in data) && (!data['${column_name}'])) delete data['${column_name}'];`;
                forKeysArr.push(item['column_name']);
            }
        });

        if (removeThisValuesBeforeSubmit !== "") removeThisValuesBeforeSubmit += "\n";

        let editorContentString = "";
        recordColumn += `    <td style='text-align:center'>\${pos+1}</td>\n`;
        recordColumnHeader += `<th style='text-align:center'>Srn</th>\n`;
        result.forEach((colval) => {
            const typeExtract = /(\w+) ?(\((\d*\,?\d+?)\))?/.exec(colval['Type']);
            let colType = (typeExtract[1]) ? typeExtract[1] : "";
            let colSize = (typeExtract[3]) ? typeExtract[3] : "";
            let colLabel = makeComponentName(colval.Field);
            let colKey = colval['Key'];            

            if (['MEDIUMTEXT', 'LONGTEXT', 'MEDIUMBLOB', 'LONGBLOB', 'BLOB'].includes(colType.toUpperCase())) {
                editorContentString += `let ${colval.Field}EditorContainerObj = document.querySelector('#${colval.Field}EditorContainer');\n`;
                editorContentString += `if (${colval.Field}EditorContainerObj) {\n`;
                editorContentString += `    let ${colval.Field}EditorObj = new wysEditor({\n`;
                editorContentString += `        filePrefix: "${colval.Field}",\n`;
                editorContentString += `        maxFileSize: 10,//mb\n`;
                editorContentString += `        maxFileCount: 10,\n`;
                editorContentString += `        fileServerUrl: \`\${imageUrl()}/${tableName}\`\n`;
                editorContentString += `    });\n`;
                editorContentString += `    ${colval.Field}EditorContainerObj.append(${colval.Field}EditorObj.renderWysEditor());\n`;
                editorContentString += `}\n`;

                editorContentString += `//Get editor current content\n`;
                editorContentString += `//${colval.Field}EditorObj.wysEditorContents();\n`;
                editorContentString += `//Put content in editor\n`;
                editorContentString += `//${colval.Field}EditorObj.wysEditorPutContents();\n`;
                editorContentString += `//To clear editor content\n`;
                editorContentString += `//${colval.Field}EditorObj.wysEditorClear();\n`;
            }

            let isImageField = (/_picture$/.exec(colval.Field)) ? true : false;
            let isVideoField = (/_video$/.exec(colval.Field)) ? true : false;
            let isAudioField = (/_audio$/.exec(colval.Field)) ? true : false;

            recordColumnHeader += `                        <th style='text-align:center'>${colval.Field}</th>\n`;

            let filesHandlerCode = "";
            if (isImageField || isVideoField || isAudioField) {
                let colFileType = "";
                if (isImageField) colFileType = "image";
                if (isVideoField) colFileType = "video";
                if (isAudioField) colFileType = "audio";

                filesHandlerCode += `let ${colval.Field}Obj = document.querySelector("${colval.Field}");\n`;
                filesHandlerCode += `if (${colval.Field}Obj) {\n`;
                filesHandlerCode += `    ${colval.Field}Obj.addEventListener('change', (e) => {\n`;
                filesHandlerCode += `        ${colval.Field}_${colFileType}.src = window.URL.createObjectURL(e.target.files[0]);\n`;
                filesHandlerCode += `    });\n`;
                filesHandlerCode += `}\n`;
            
                removeThisValuesBeforeSubmit += `//Because file fields need special attention\n`;
                removeThisValuesBeforeSubmit += `if (data['${colval.Field}']) delete data['${colval.Field}'];\n`;
            }
            AllFilesHandlerCode += filesHandlerCode;

            switch(colType.toUpperCase()) {
                case "TINYINT":
                case "SMALLINT":
                case "INT":
                case "MEDIUMINT":
                case "BIGINT": 
                case "FLOAT":
                case "DOUBLE":
                if (colKey === "MUL") {
                    recordColumn += `                        <td style='text-align:center'>\${((item['${fkMaps[colval.Field]}']) && (item['${fkMaps[colval.Field]}']['names'])) ? item['${fkMaps[colval.Field]}']['names'] : ""}</td>\n`;
                } else {
                    recordColumn += `                        <td style='text-align:center'>\${item['${colval.Field}']}</td>\n`;
                }
                break;
    
                case "DATETIME":
                case "TIMESTAMP":
                case "DATE":
                recordColumn += `                        <td style='text-align:center'>\${dateFormat(item['${colval.Field}'])}</td>\n`;
                break;   
    
                case "TIME":
                case "YEAR":
                recordColumn += `                        <td style='text-align:center'>\${item['${colval.Field}']}</td>\n`;
                break;
    
                case "TINYTEXT":
                case "TEXT":
                case "MEDIUMTEXT":
                case "LONGTEXT": 
                case "TINYBLOB":
                case "BLOB":
                case "MEDIUMBLOB":
                case "LONGBLOB": 
                case "VARCHAR":
                case "CHAR":
                    recordColumn += `                        <td style='text-align:center'>\${item['${colval.Field}']}</td>\n`;
                break;
            }
        });

        recordColumnHeader += `                        <th style='text-align:center'>Actions</th>`;
        

        recordColumn += `                        <td style='text-align:center'>\n`;
        recordColumn += `                    <i id='toEdit==\${item['id']}' style='font-size: 20px;cursor:pointer' class="mdi mdi-pencil-outline toProcess"></i>&nbsp;&nbsp;\n`;
        recordColumn += `                    <i id='toDelete==\${item['id']}' style='color:red;font-size: 20px;cursor:pointer' class="mdi mdi-delete-outline toProcess"></i>\n`;
        recordColumn += `                </td>\n`;


    let jsDisplay = `
    $(document).ready(function() {
        ${editorContentString}
    `;

    let makeRecordCall = "";
    if (tableName.toLowerCase() !== "users") {
        jsDisplay += `
        /**
         * Record Display Routine
         * 
         */
        let limit = 10;
        let offset = 0;
        let totalRecordCount;
        let renderedRecordCount = 0;
        const getRecords = () => {
            getData(\`/${tableName.toLowerCase()}?limit=\${limit}&offset=\${offset}\`).then((rdata) => {
                if ((rdata) && (rdata.rows)) {
                    totalRecordCount = rdata.count;  
                    renderedRecordCount += rdata.rows.length;
                    if ((offset+limit) < totalRecordCount) offset += limit;
                    rdata.rows.forEach((item, pos) => {
                        let dispString  = "";
                        dispString += \`
                        ${recordColumn}
                        \`;
                        //document.querySelector("#recDisplay").innerHTML = dispString;
                        document.querySelector("#recDisplay tbody").insertAdjacentHTML("beforeend", dispString); 
                    });
    
                    /**
                     * Record Editing & Deletion routine
                     * 
                     */
                    setTimeout(() => {
                        const toProcess = document.querySelectorAll(".toProcess");
                        if (toProcess) {
                            toProcess.forEach((item) => {
                                item.addEventListener('click', (e) => {                    
                                    e.preventDefault();
                                    let currId = e.target.id;
                                    let procSplit = currId.split("==");
                                    (procSplit[0].trim() === "toDelete") ? doRecordDelete(procSplit[1]) : intEditingProcess(procSplit[1]);
        
                                    if (procSplit[0].trim() === "toEdit") {
                                        $('html, body').animate({
                                            scrollTop: $("#work-area").offset().top
                                        }, 1000);
                                    }
                                });    
                            });
                        }
                    }, 100);    
                }
            });
        };
        if (document.querySelector("#recDisplay tbody")) getRecords();

        `;
        makeRecordCall = "getRecords();";
    } else {
        jsDisplay += `
        /**
         * User Login Routine
         * 
         */
        const userLoginForm = document.querySelector("#userLoginForm");
        if (userLoginForm) {
            userLoginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const data = {};
                for (const pair of new FormData(document.getElementById('userLoginForm'))) {
                    data[pair[0]] = pair[1];
                }
                postData(data, '/users/login').then((rdata) => {
                    if (rdata.status === true) {
                        localStore(rdata.data.token, 'userToken', 'add');
                        setTimeout(() => {
                            window.location.href = "html/home.html";
                        }, 1000);
                    } else {
                        alert(rdata.message);
                    }
                }).catch((error) => {
                    console.log(error);
                });
            });
        }
        

        /**
         * User Sign Up Routine
         * 
         */
        const userRegisterForm = document.querySelector("#userRegisterForm");
        if (userRegisterForm) {
            userRegisterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const data = {};
                for (const pair of new FormData(document.getElementById('userRegisterForm'))) {
                    data[pair[0]] = pair[1];
                }
                postData(data, '/users').then((rdata) => {
                    if (rdata.status === true) {
                        localStore(rdata.data.token, 'userToken', 'add');
                        setTimeout(() => {
                            window.location.href = "html/home.html";
                        }, 1000);
                    } else {
                        alert(rdata.message);
                    }
                }).catch((error) => {
                    console.log(error);
                });
            });
        }
        
        
        /**
         * User Password Reset Routine
         * 
         */
        const userPassResetForm = document.querySelector("#userPassResetForm");
        if (userPassResetForm) {
            userPassResetForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const data = {};
                for (const pair of new FormData(document.getElementById('userPassResetForm'))) {
                    data[pair[0]] = pair[1];
                }
                postData(data, '/users/reset').then((rdata) => {
                    if (rdata.status === true) {
                        localStore(rdata.data.token, 'userToken', 'add');
                        setTimeout(() => {
                            //window.location.href = "html/index.html";
                        }, 1000);
                    } else {
                        alert(rdata.message);
                    }
                }).catch((error) => {
                    console.log(error);
                });
            });
        }\n\n`;
    }


    jsDisplay += `
        /**
         * Record Save/Update Routine
         * 
         */
        const ${tableName}Form = document.querySelector("#${tableName}Form1");
        if (${tableName}Form) {
            ${tableName}Form.addEventListener('submit', (e) => {
                e.preventDefault();
                const data = {};
                for (const pair of new FormData(document.getElementById('${tableName}Form1'))) {
                    data[pair[0]] = pair[1];
                }
                ${removeThisValuesBeforeSubmit}
            
                if (data.id) {
                    putData(data, \`/${tableName.toLowerCase()}/\${data.id}\`).then((rdata) => {
                        if (notEmpty(rdata)) {
                            ${makeRecordCall}
                        }
                    });
                } else {
                    postData(data, \`/${tableName.toLowerCase()}\`).then((rdata) => {
                        if (notEmpty(rdata)) {
                            ${makeRecordCall}
                        }
                    });
                }
            });
        }


        /**
         * Record Delete
         * 
         */
        const doRecordDelete = (recId) => {
            deleteData({}, \`/${tableName.toLowerCase()}/\${recId}\`).then((rdata) => {
                ${makeRecordCall}
            }).catch((error) => console.log(error));
        }


        /**
         * Record Edit
         * 
         */
        const intEditingProcess = (recId) => {
            getData(\`/${tableName.toLowerCase()}/\${recId}\`).then((rdata) => {
                const data = rdata.rows[0];
                for (let prop in data) {
                    const dsDom = document.querySelector(\`#\${prop}\`);                
                    if (dsDom) dsDom.value = data[prop];
                } 
            });
        }


        /**
         * File(s) Upload handler
         * 
         */
        ${AllFilesHandlerCode}

        
        /**
         * Select Input field(s)
         * 
         */
        ${drpdwnDisplay}
        `;

        if (tableName.toLowerCase() !== "users") {
            jsDisplay += `
        /**
         * Pagination & page scrolling
         * 
         */
        document.addEventListener('scroll', (event) => {
            if (($(window).innerHeight() + $(window).scrollTop()) >= $("body").height()) {
                const toOffset = limit+offset;
                if (renderedRecordCount < totalRecordCount) {
                    ${makeRecordCall}
                }
            }
        });`;
        }

        jsDisplay += `
    });`;
    return jsDisplay;
};


const doInputTypes = (colval, type, colLabel) => {
    if (colval.Field.toLowerCase().includes("password")) type = "password";
    renderDisp  = "";
    renderDisp += `    <div class="form-group">\n`;
    renderDisp += `        <label for="${colval.Field}">${colLabel}:</label>\n`;
    renderDisp += `        <input type="${type}" id="${colval.Field}" name="${colval.Field}" class="form-control" />\n`;
    renderDisp += `    </div>\n`;
    return renderDisp;
}


const doTextArea = (colval, colLabel, colType) => {
    renderDisp  = "";
    if (['MEDIUMTEXT', 'LONGTEXT', 'MEDIUMBLOB', 'LONGBLOB', 'BLOB'].includes(colType.toUpperCase())) {
        renderDisp += `    <div class="form-group">\n`;
        renderDisp += `        <label for="${colval.Field}">${colLabel}:</label>\n`;
        renderDisp += `        <div id="${colval.Field}EditorContainer" class="editorContainerStyle"></div>\n`;
        renderDisp += `    </div>\n`;
    } else {
        renderDisp += `    <div class="form-group">\n`;
        renderDisp += `        <label for="${colval.Field}">${colLabel}:</label>\n`;
        renderDisp += `        <textarea id="${colval.Field}" name="${colval.Field}" class="form-control" class="form-control"></textarea>\n`;
        renderDisp += `    </div>\n`;
    }
    return renderDisp;
};


const doInputCheckBox = (colval, colLabel) => {
    renderDisp  = "";
    renderDisp += `    <div class="custom-control custom-checkbox mb-3">\n`;
    renderDisp += `        <input type="checkbox" id="${colval.Field}" name="${colval.Field}" class="custom-control-input" />\n`;
    renderDisp += `        <label class="custom-control-label" for="${colval.Field}">${colLabel}</label>\n`;
    renderDisp += `    </div>\n`;
    return renderDisp;
};


const doInputSelect = (colval, colLabel) => {
    renderDisp  = "";
    let singularName = makeSingularName(colval.Field);
    if (!columnsToExempt.includes(colval.Field)) {
        renderDisp += `    <div class="form-group" id="${colval.Field.toLowerCase()}-wrap">\n`;
        renderDisp += `        <label for="${colval.Field}">${colLabel}:</label>\n`;
        renderDisp += `        <select name="${colval.Field}" id="${colval.Field}" class="form-control">\n`;
        renderDisp += `            <option value="">Select ${singularName}</option>\n`;
        renderDisp += `        </select>\n`;
        renderDisp += `    </div>\n`;
    } else {
        renderDisp += "";
    }    
    return renderDisp;
};


module.exports.makeHtmlFiles = (tableName) => {
    const componentName = makeComponentName(tableName);
    return queryHandler(`DESC ${tableName}`).then((result) => {
        const tableColumns = [];
        const forKeys = [];
        const forInKeyVal  = [];
        result.forEach((col) => {
            if (col['Key'] === "MUL") {
                forInKeyVal.push(col.Field);
            }
            tableColumns.push(col.Field);
        });

        return getPFkeys(tableName, forInKeyVal.join("','"), "", "").then((foreignKeys) => {

            let htmlFile = formsTemplate(result, tableName, foreignKeys);            
            let recordFile = reportTemplate(result, tableName, foreignKeys);
            let jsFile = pageJsFile(result, tableName, foreignKeys); //renderJsFile(result, tableName, foreignKeys);
            
            let singlePage = "";//pageTemplateForJqueryLoading(result, renderForm(result, tableName, foreignKeys), "form", tableName);
            let singlePageRecord = "";//pageTemplateForJqueryLoading(result, "", "recordDisplay", tableName);

            let jsHtml = { htmlFile, recordFile, jsFile, singlePage, singlePageRecord };
            return jsHtml;
        });
    }).catch((error) => {
        throw error;
    });
};